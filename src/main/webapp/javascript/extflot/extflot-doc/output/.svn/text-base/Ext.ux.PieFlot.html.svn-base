<div class="body-wrap" xmlns:ext="http://www.extjs.com"><div class="top-tools"><a class="inner-link" href="#Ext.ux.PieFlot-props"><img src="resources/images/default/s.gif" class="item-icon icon-prop">Properties</a>&#13;<a class="inner-link" href="#Ext.ux.PieFlot-methods"><img src="resources/images/default/s.gif" class="item-icon icon-method">Methods</a>&#13;<a class="inner-link" href="#Ext.ux.PieFlot-events"><img src="resources/images/default/s.gif" class="item-icon icon-event">Events</a>&#13;<a class="inner-link" href="#Ext.ux.PieFlot-configs"><img src="resources/images/default/s.gif" class="item-icon icon-config">Config Options</a>&#13;<a class="bookmark" href="../docs/?class=Ext.ux.PieFlot"><img src="resources/images/default/s.gif" class="item-icon icon-fav">Direct Link</a>&#13;</div><div class="inheritance res-block"><pre class="res-block-inner"><a href="output/Ext.util.Observable.html" ext:member="" ext:cls="Ext.util.Observable">Observable</a>&#13;&nbsp;&nbsp;<img src="resources/elbow-end.gif"><a href="output/Ext.Component.html" ext:member="" ext:cls="Ext.Component">Component</a>&#13;&nbsp;&nbsp;&nbsp;&nbsp;<img src="resources/elbow-end.gif"><a href="output/Ext.BoxComponent.html" ext:member="" ext:cls="Ext.BoxComponent">BoxComponent</a>&#13;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="resources/elbow-end.gif"><a href="output/Ext.ux.Flot.html" ext:member="" ext:cls="Ext.ux.Flot">Flot</a>&#13;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="resources/elbow-end.gif">PieFlot</pre></div><h1>Class <a href="source/PieFlot.html#cls-Ext.ux.PieFlot">Ext.ux.PieFlot</a></h1><table cellspacing="0"><tr><td class="label">Package:</td><td class="hd-info">Ext.ux</td></tr><tr><td class="label">Defined In:</td><td class="hd-info"><a href="source/PieFlot.html#cls-Ext.ux.PieFlot">PieFlot.js</a></td></tr><tr><td class="label">Class:</td><td class="hd-info"><a href="source/PieFlot.html#cls-Ext.ux.PieFlot">PieFlot</a></td></tr><tr><td class="label">Extends:</td><td class="hd-info"><a href="output/Ext.ux.Flot.html" ext:cls="Ext.ux.Flot" ext:member="">Flot</a></td></tr></table><div class="description">The flot for pie chart
<br><br>
PieFlot can accept multiple series data which is grouped by value.
<pre>
data: [{
  label: <String>,
  data: [[<id>, <value>], ...]
},{
...
}]
</pre>
The x value of data (data[i][j][0]) is set as the serie ID, and it is ignored internally,
the sum of y value (data[i][j][1]) is real value of the serie.
<br><br>
The ratio which the serie take in the pie chart is the fraction of each serie.
<pre>
series: [
  { label: 'Niveau A', data: [[0,2]]},  # 40%
  { label: 'Niveau B', data: [[1,2]]},  # 40%
  { label: 'Niveau C', data: [[2,1]]},  # 20%
  { label: 'Niveau D', data: [[3,0]]}   #  0%
],
</pre>
Note that pie chart does not require any operations, context menu contains
just a property menu by default.</div><div class="hr"></div><a id="Ext.ux.PieFlot-configs"></a><h2>Config Options</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">Config Options</th><th class="msource-header">Defined By</th></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-allowDomMove"></a><b><a href="source/Component.html#cfg-Ext.Component-allowDomMove">allowDomMove</a></b> : Boolean<div class="mdesc">Whether the component can move the Dom node when rendering (defaults to true).</div></td><td class="msource"><a href="output/Ext.Component.html#allowDomMove" ext:member="#allowDomMove" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-applyTo"></a><b><a href="source/Component.html#cfg-Ext.Component-applyTo">applyTo</a></b> : Mixed<div class="mdesc"><div class="short">The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in&#13;
the document...</div><div class="long">The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in
the document that specifies some structural markup for this component.  When applyTo is used, constituent parts of
the component can also be specified by id or CSS class name within the main element, and the component being created
may attempt to create its subcomponents from that markup if applicable. Using this config, a call to render() is
not required.  If applyTo is specified, any value passed for <a href="output/Ext.Component.html#Ext.Component-renderTo" ext:member="renderTo" ext:cls="Ext.Component">renderTo</a> will be ignored and the target
element's parent node will automatically be used as the component's container.</div></div></td><td class="msource"><a href="output/Ext.Component.html#applyTo" ext:member="#applyTo" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-autoEl"></a><b><a href="source/Component.html#cfg-Ext.Component-autoEl">autoEl</a></b> : String/Object<div class="mdesc"><div class="short">A tag name or DomHelper spec to create an element with. This is intended to create shorthand&#13;
utility components inli...</div><div class="long">A tag name or DomHelper spec to create an element with. This is intended to create shorthand
utility components inline via JSON. It should not be used for higher level components which already create
their own elements. Example usage:
<pre><code>{xtype:<em>'box'</em>, autoEl: <em>'div'</em>, cls:<em>'my-class'</em>}
{xtype:<em>'box'</em>, autoEl: {tag:<em>'blockquote'</em>, html:<em>'autoEl is cool!'</em>}} <i>// <b>with</b> DomHelper</i></code></pre></div></div></td><td class="msource"><a href="output/Ext.Component.html#autoEl" ext:member="#autoEl" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-autoHeight"></a><b><a href="source/BoxComponent.html#cfg-Ext.BoxComponent-autoHeight">autoHeight</a></b> : Boolean<div class="mdesc"><div class="short">True to use height:'auto', false to use fixed height (defaults to false). Note: Although many components &#13;
inherit th...</div><div class="long">True to use height:'auto', false to use fixed height (defaults to false). <b>Note</b>: Although many components 
inherit this config option, not all will function as expected with a height of 'auto'. Setting autoHeight:true 
means that the browser will manage height based on the element's contents, and that Ext will not manage it at all.</div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#autoHeight" ext:member="#autoHeight" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-autoShow"></a><b><a href="source/Component.html#cfg-Ext.Component-autoShow">autoShow</a></b> : Boolean<div class="mdesc"><div class="short">True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove&#13;
them on rende...</div><div class="long">True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove
them on render (defaults to false).</div></div></td><td class="msource"><a href="output/Ext.Component.html#autoShow" ext:member="#autoShow" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-autoWidth"></a><b><a href="source/BoxComponent.html#cfg-Ext.BoxComponent-autoWidth">autoWidth</a></b> : Boolean<div class="mdesc"><div class="short">True to use width:'auto', false to use fixed width (defaults to false). Note: Although many components &#13;
inherit this...</div><div class="long">True to use width:'auto', false to use fixed width (defaults to false). <b>Note</b>: Although many components 
inherit this config option, not all will function as expected with a width of 'auto'. Setting autoWidth:true 
means that the browser will manage width based on the element's contents, and that Ext will not manage it at all.</div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#autoWidth" ext:member="#autoWidth" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-bars"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-bars">bars</a></b> : Object<div class="mdesc"><div class="short">flot bars
see also lines


  bars: {
    barWidth: number
    align: "left" or "center"
    horizontal: boolean
  }

...</div><div class="long">flot bars
see also lines
<br><br>
<pre>
  bars: {
    barWidth: number
    align: "left" or "center"
    horizontal: boolean
  }
</pre>
For bars, fillColor can be a gradient, see the gradient documentation below. 
"barWidth" is the width of the bars in units of the x axis,
contrary to most other measures that are specified in pixels. 
For instance, for time series the unit is milliseconds so 24 * 60 * 60 * 1000 produces bars with the width of a day. 
"align" specifies whether a bar should be left-aligned (default) or centered on top of the value it represents. 
When "horizontal" is on, the bars are drawn horizontally, i.e. from the y axis instead of the x axis; 
note that the bar end points are still defined in the same way so you'll
probably want to swap the coordinates if you've been plotting vertical bars first.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#bars" ext:member="#bars" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-basePropertyColumn"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-basePropertyColumn">basePropertyColumn</a></b> : Object<div class="mdesc">Base configurations of columns of Ext Flot property grid. 
This is options <a href="output/Ext.grid.ColumnModel.html" ext:cls="Ext.grid.ColumnModel">Ext.grid.ColumnModel</a>.</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#basePropertyColumn" ext:member="#basePropertyColumn" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-baseSeries"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-baseSeries">baseSeries</a></b> : Object<div class="mdesc">The base options of each series.
It is applied by Ext.apply(), not Ext.applyIf().</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#baseSeries" ext:member="#baseSeries" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-clearCls"></a><b><a href="source/Component.html#cfg-Ext.Component-clearCls">clearCls</a></b> : String<div class="mdesc"><div class="short">The CSS class used to provide field clearing (defaults to 'x-form-clear-left').&#13;
This config is only used when this C...</div><div class="long">The CSS class used to provide field clearing (defaults to 'x-form-clear-left').
<p><b>This config is only used when this Component is rendered by a Container which has been
configured to use the <a href="output/Ext.form.FormLayout.html" ext:cls="Ext.form.FormLayout">FormLayout</a> layout manager.</b></p></div></div></td><td class="msource"><a href="output/Ext.Component.html#clearCls" ext:member="#clearCls" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-cls"></a><b><a href="source/Component.html#cfg-Ext.Component-cls">cls</a></b> : String<div class="mdesc"><div class="short">An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be&#13;
useful for...</div><div class="long">An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be
useful for adding customized styles to the component or any of its children using standard CSS rules.</div></div></td><td class="msource"><a href="output/Ext.Component.html#cls" ext:member="#cls" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  "><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.PieFlot-colors"></a><b><a href="source/PieFlot.html#cfg-Ext.ux.PieFlot-colors">colors</a></b> : Array<div class="mdesc">changed from Flot default</div></td><td class="msource">PieFlot</td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-crosshair"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-crosshair">crosshair</a></b> : Object<div class="mdesc"><div class="short">flot crosshair option
This is not supported in flot 0.5

  crosshair: {
    mode: null or "x" or "y" or "xy"
    colo...</div><div class="long">flot crosshair option
This is not supported in flot 0.5
<pre>
  crosshair: {
    mode: null or "x" or "y" or "xy"
    color: color
  }
</pre>
You can enable crosshairs, thin lines, that follow the mouse by setting the mode to one of "x", "y" or "xy". 
The "x" mode enables a vertical crosshair that lets you trace the values on the x axis, 
"y" enables a horizontal crosshair and "xy" enables them both.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#crosshair" ext:member="#crosshair" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-ctCls"></a><b><a href="source/Component.html#cfg-Ext.Component-ctCls">ctCls</a></b> : String<div class="mdesc"><div class="short">An optional extra CSS class that will be added to this component's container (defaults to '').  This can be&#13;
useful f...</div><div class="long">An optional extra CSS class that will be added to this component's container (defaults to '').  This can be
useful for adding customized styles to the container or any of its children using standard CSS rules.</div></div></td><td class="msource"><a href="output/Ext.Component.html#ctCls" ext:member="#ctCls" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-disabled"></a><b><a href="source/Component.html#cfg-Ext.Component-disabled">disabled</a></b> : Boolean<div class="mdesc">Render this component disabled (default is false).</div></td><td class="msource"><a href="output/Ext.Component.html#disabled" ext:member="#disabled" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-disabledClass"></a><b><a href="source/Component.html#cfg-Ext.Component-disabledClass">disabledClass</a></b> : String<div class="mdesc">CSS class added to the component when it is disabled (defaults to "x-item-disabled").</div></td><td class="msource"><a href="output/Ext.Component.html#disabledClass" ext:member="#disabledClass" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-fieldLabel"></a><b><a href="source/Component.html#cfg-Ext.Component-fieldLabel">fieldLabel</a></b> : String<div class="mdesc"><div class="short">The label text to display next to this Component (defaults to '')&#13;
This config is only used when this Component is re...</div><div class="long">The label text to display next to this Component (defaults to '')
<p><b>This config is only used when this Component is rendered by a Container which has been
configured to use the <a href="output/Ext.form.FormLayout.html" ext:cls="Ext.form.FormLayout">FormLayout</a> layout manager.</b></p>
Example use:<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>
    }]
});</code></pre></div></div></td><td class="msource"><a href="output/Ext.Component.html#fieldLabel" ext:member="#fieldLabel" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-grid"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-grid">grid</a></b> : Object<div class="mdesc"><div class="short">flot grid options

  grid: {
    color: color
    backgroundColor: color/gradient or null
    tickColor: color
    la...</div><div class="long">flot grid options
<pre>
  grid: {
    color: color
    backgroundColor: color/gradient or null
    tickColor: color
    labelMargin: number
    markings: array of markings or (fn: axes -> array of markings)
    borderWidth: number
    borderColor: color or null
    clickable: boolean
    hoverable: boolean
    autoHighlight: boolean
    mouseActiveRadius: number
  }
</pre>
The grid is the thing with the axes and a number of ticks. "color" is
the color of the grid itself whereas "backgroundColor" specifies the
background color inside the grid area. 
The default value of null means that the background is transparent. 
You can also set a gradient, see the gradient documentation below.
<br><br>
"tickColor" is the color of the ticks and "labelMargin" is the spacing between tick labels and the grid. 
Note that you can style the tick labels with CSS, e.g. to change the color. 
They have class "tickLabel".
"borderWidth" is the width of the border around the plot. 
Set it to 0 to disable the border. 
You can also set "borderColor" if you want the border to have a different color than the grid lines.
<br><br>
"markings" is used to draw simple lines and rectangular areas in the background of the plot. 
You can either specify an array of ranges on the form 
<pre>
{ xaxis: { from, to }, yaxis: { from, to } } 
</pre>
(secondary axis coordinates with x2axis/y2axis) or with a function 
that returns such an array given the axes for the plot in an object as the first parameter.
<br><br>
You can set the color of markings by specifying "color" in the ranges object. 
Here's an example array:
<pre>
  markings: [ { xaxis: { from: 0, to: 2 }, yaxis: { from: 10, to: 10 }, color: "#bb0000" }, ... ]
</pre>
If you leave out one of the values, that value is assumed to go to the border of the plot. 
So for example if you only specify 
<pre>
{ xaxis: { from: 0, to: 2 } } 
</pre>
it means an area that extends from the top to the bottom of the plot in the x range 0-2.
A line is drawn if from and to are the same, e.g.
<pre>
  markings: [ { yaxis: { from: 1, to: 1 } }, ... ]
</pre>
would draw a line parallel to the x axis at y = 1. 
You can control the line width with "lineWidth" in the ranges objects.
<br><br>
An example function might look like this:
<pre>
  markings: function (axes) {
    var markings = [];
    for (var x = Math.floor(axes.xaxis.min); x < axes.xaxis.max; x += 2)
      markings.push({ xaxis: { from: x, to: x + 1 } });
    return markings;
  }
</pre>
If you set "clickable" to true, the plot will listen for click events on the plot area 
and fire a "plotclick" event on the placeholder with a position and a nearby data item object as parameters. 
The coordinates are available both in the unit of the axes (not in pixels) and in global screen coordinates.
<br><br>
Likewise, if you set "hoverable" to true, 
the plot will listen for mouse move events on the plot area and fire a "plothover" event 
with the ame parameters as the "plotclick" event. 
If "autoHighlight" is true (the default), nearby data items are highlighted automatically.
If needed, you can disable highlighting and control it yourself 
with the highlight/unhighlight plot methods described elsewhere.
<br><br>
You can use "plotclick" and "plothover" events like this:
<pre>
    $.plot($("#placeholder"), [ d ], { grid: { clickable: true } });

    $("#placeholder").bind("plotclick", function (event, pos, item) {
        alert("You clicked at " + pos.x + ", " + pos.y);
        // secondary axis coordinates if present are in pos.x2, pos.y2,
        // if you need global screen coordinates, they are pos.pageX, pos.pageY

        if (item) {
          highlight(item.series, item.datapoint);
          alert("You clicked a point!");
        }
    });
</pre>
The item object in this example is either null or a nearby object on the form:
<pre>
  item: {
      datapoint: the point as you specified it in the data, e.g. [0, 2]
      dataIndex: the index of the point in the data array
      series: the series object
      seriesIndex: the index of the series
      pageX, pageY: the global screen coordinates of the point
  }
</pre>
For instance, if you have specified the data like this 
<pre>
    $.plot($("#placeholder"), [ { label: "Foo", data: [[0, 10], [7, 3]] } ], ...);
</pre>
and the mouse is near the point (7, 3), "datapoint" is the [7, 3] we specified, 
"dataIndex" will be 1, "series" is a normalized series object with among other things 
the "Foo" label in series.label and the color in series.color, and "seriesIndex" is 0.
<br><br>
If you use the above events to update some other information and 
want to clear out that info in case the mouse goes away, 
you'll probably also need to listen to "mouseout" events on the placeholder div.
<br><br>
"mouseActiveRadius" specifies how far the mouse can be from an item and still activate it. 
If there are two or more points within this radius, 
Flot chooses the closest item. For bars, the top-most bar
(from the latest specified data series) is chosen.
<br><br>
If you want to disable interactivity for a specific data series, 
you can set "hoverable" and "clickable" to false in the options for that series, 
like this 
<pre>
{ data: [...], label: "Foo", clickable: false }.
</pre>
In Ext.ux.Flot, the 'clickable' and 'hoverable' are true by default.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#grid" ext:member="#grid" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-height"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-height">height</a></b> : Integer/String<div class="mdesc">Height of this Ext.ux.Flot instance
Not specifyed, the height is same as parent's.</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#height" ext:member="#height" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hidden"></a><b><a href="source/Component.html#cfg-Ext.Component-hidden">hidden</a></b> : Boolean<div class="mdesc">Render this component hidden (default is false).</div></td><td class="msource"><a href="output/Ext.Component.html#hidden" ext:member="#hidden" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hideLabel"></a><b><a href="source/Component.html#cfg-Ext.Component-hideLabel">hideLabel</a></b> : Boolean<div class="mdesc"><div class="short">True to completely hide the label element (defaults to false).  By default, even if&#13;
you do not specify a fieldLabel ...</div><div class="long">True to completely hide the label element (defaults to false).  By default, even if
you do not specify a <a href="output/fieldLabel.html" ext:cls="fieldLabel">fieldLabel</a> the space will still be reserved so that the field will line up with
other fields that do have labels. Setting this to true will cause the field to not reserve that space.
<p><b>This config is only used when this Component is rendered by a Container which has been
configured to use the <a href="output/Ext.form.FormLayout.html" ext:cls="Ext.form.FormLayout">FormLayout</a> layout manager.</b></p>
Example use:<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>
        hideLabel: true
    }]
});</code></pre></div></div></td><td class="msource"><a href="output/Ext.Component.html#hideLabel" ext:member="#hideLabel" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hideMode"></a><b><a href="source/Component.html#cfg-Ext.Component-hideMode">hideMode</a></b> : String<div class="mdesc"><div class="short">How this component should be hidden. Supported values are "visibility" (css visibility), "offsets" (negative&#13;
offset ...</div><div class="long"><p>How this component should be hidden. Supported values are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults to "display".</p>
<p>For Containers which may be hidden and shown as part of a <a href="output/Ext.layout.CardLayout.html" ext:cls="Ext.layout.CardLayout">card layout</a> Container such as a
<a href="output/Ext.TabPanel.html" ext:cls="Ext.TabPanel">TabPanel</a>, it is recommended that hideMode is configured as "offsets". This ensures
that hidden Components still have height and width so that layout managers can perform measurements when
calculating layouts.</p></div></div></td><td class="msource"><a href="output/Ext.Component.html#hideMode" ext:member="#hideMode" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hideParent"></a><b><a href="source/Component.html#cfg-Ext.Component-hideParent">hideParent</a></b> : Boolean<div class="mdesc"><div class="short">True to hide and show the component's container when hide/show is called on the component, false to hide&#13;
and show th...</div><div class="long">True to hide and show the component's container when hide/show is called on the component, false to hide
and show the component itself (defaults to false).  For example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button when adding it to its parent container.</div></div></td><td class="msource"><a href="output/Ext.Component.html#hideParent" ext:member="#hideParent" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-id"></a><b><a href="source/Component.html#cfg-Ext.Component-id">id</a></b> : String<div class="mdesc"><div class="short">The unique id of this component (defaults to an auto-assigned id). You should assign an id if you need to&#13;
be able to...</div><div class="long">The unique id of this component (defaults to an auto-assigned id). You should assign an id if you need to
be able to access the component later and you do not have an object reference available (e.g., using
<a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-getCmp" ext:member="getCmp" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.getCmp</a>). Note that this id will also be used as the element id for the containing
HTML element that is rendered to the page for this component. This allows you to write id-based CSS rules to
style the specific instance of this component uniquely, and also to select sub-elements using this
component's id as the parent.</div></div></td><td class="msource"><a href="output/Ext.Component.html#id" ext:member="#id" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-itemCls"></a><b><a href="source/Component.html#cfg-Ext.Component-itemCls">itemCls</a></b> : String<div class="mdesc"><div class="short">An additional CSS class to apply to the wrapper's form item element of this field (defaults&#13;
to the container's itemC...</div><div class="long">An additional CSS class to apply to the wrapper's form item element of this field (defaults
to the container's itemCls value if set, or '').  Since it is applied to the item wrapper, it allows you to write
standard CSS rules that can apply to the field, the label (if specified) or any other element within the markup for
the field.
<p><b>This config is only used when this Component is rendered by a Container which has been
configured to use the <a href="output/Ext.form.FormLayout.html" ext:cls="Ext.form.FormLayout">FormLayout</a> layout manager.</b></p>
Example use:<pre><code><i>// Apply a style to the field<em>'s <b>label</b>:</i>
&lt;style>
    .required .x-form-item-<b>label</b> {font-weight:bold;color:red;}
&lt;/style>

<b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: '</em>textfield<em>',
        fieldLabel: '</em>Name<em>',
        itemCls: '</em>required<em>' <i>//this <b>label</b> will be styled</i>
    },{
        xtype: '</em>textfield<em>',
        fieldLabel: '</em>Favorite Color<em>'
    }]
});</code></pre></div></div></td><td class="msource"><a href="output/Ext.Component.html#itemCls" ext:member="#itemCls" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-labelSeparator"></a><b><a href="source/Component.html#cfg-Ext.Component-labelSeparator">labelSeparator</a></b> : String<div class="mdesc"><div class="short">The standard separator to display after the text of each form label (defaults&#13;
to the value of Ext.layout.FormLayout....</div><div class="long">The standard separator to display after the text of each form label (defaults
to the value of <a href="output/Ext.layout.FormLayout.html#Ext.layout.FormLayout-labelSeparator" ext:member="labelSeparator" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout.labelSeparator</a>, which is a colon ':' by default).  To display
no separator for this field's label specify empty string ''.
<p><b>This config is only used when this Component is rendered by a Container which has been
configured to use the <a href="output/Ext.form.FormLayout.html" ext:cls="Ext.form.FormLayout">FormLayout</a> layout manager.</b></p>
Example use:<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        labelSeparator: <em>'...'</em>
    }]
});</code></pre></div></div></td><td class="msource"><a href="output/Ext.Component.html#labelSeparator" ext:member="#labelSeparator" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-labelStyle"></a><b><a href="source/Component.html#cfg-Ext.Component-labelStyle">labelStyle</a></b> : String<div class="mdesc"><div class="short">A CSS style specification to apply directly to this field's label (defaults to the&#13;
container's labelStyle value if s...</div><div class="long">A CSS style specification to apply directly to this field's label (defaults to the
container's labelStyle value if set, or '').<code></code>.
<p><b>This config is only used when this Component is rendered by a Container which has been
configured to use the <a href="output/Ext.form.FormLayout.html" ext:cls="Ext.form.FormLayout">FormLayout</a> layout manager.</b></p>
Example use:<pre><code><b>new</b> Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: <em>'textfield'</em>,
        fieldLabel: <em>'Name'</em>,
        labelStyle: <em>'font-weight:bold;'</em>
    }]
});</code></pre></div></div></td><td class="msource"><a href="output/Ext.Component.html#labelStyle" ext:member="#labelStyle" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-legend"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-legend">legend</a></b> : Object<div class="mdesc"><div class="short">Flot legend options. It is passed to flot with not modified.

  legend: {
    show: boolean
    labelFormatter: null ...</div><div class="long">Flot legend options. It is passed to flot with not modified.
<pre>
  legend: {
    show: boolean
    labelFormatter: null or (fn: string, series object -> string)
    labelBoxBorderColor: color
    noColumns: number
    position: "ne" or "nw" or "se" or "sw"
    margin: number of pixels or [x margin, y margin]
    backgroundColor: null or color
    backgroundOpacity: number between 0 and 1
    container: null or jQuery object/DOM element/jQuery expression
  }
</pre>
The legend is generated as a table with the data series labels and small label boxes with the color of the series. 
If you want to format the labels in some way, 
e.g. make them to links, you can pass in a function for "labelFormatter". 
Here's an example that makes them clickable:
<pre>
  labelFormatter: function(label, series) {
    // series is the series object for the label
    return '<a href="#' + label + '">' + label + '</a>';
  }
</pre>
"noColumns" is the number of columns to divide the legend table into.
"position" specifies the overall placement of the legend within the plot (top-right, top-left, etc.) 
and margin the distance to the plot edge (this can be either a number or an array of two numbers like [x, y]). 
"backgroundColor" and "backgroundOpacity" specifies the background. 
The default is a partly transparent auto-detected background.
<br><br>
If you want the legend to appear somewhere else in the DOM, 
you can specify "container" as a jQuery object/expression to put the legend table into. 
The "position" and "margin" etc. options will then be ignored. 
Note that Flot will overwrite the contents of the container.
Most of the above settings do not apply</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#legend" ext:member="#legend" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-lines"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-lines">lines</a></b> : Object<div class="mdesc"><div class="short">flot lines

The most important options are "lines", "points", "bars" and "pies"
that specifies whether and how lines,...</div><div class="long">flot lines
<br><br>
The most important options are "lines", "points", "bars" and "pies"
that specifies whether and how lines, points and bars should be shown for each data series. 
In case you don't specify anything at all, Flot will default to showing lines 
(you can turn this off with lines: { show: false}). 
You can specify the various types independently of each other, 
and Flot will happily draw each of them in turn, e.g.
<pre>
  var options = {
    lines: { show: true, fill: true, fillColor: "rgba(255, 255, 255, 0.8)" },
    points: { show: true, fill: false }
  };
</pre>
"lineWidth" is the thickness of the line or outline in pixels. 
You can set it to 0 to prevent a line or outline from being drawn; 
this will also hide the shadow.
<br><br>
"fill" is whether the shape should be filled. For lines, this produces area graphs. 
You can use "fillColor" to specify the color of the fill.
If "fillColor" evaluates to false (default for everything except points which are filled with white), 
the fill color is auto-set to the color of the data series. 
You can adjust the opacity of the fill by setting fill to a number between 0 
(fully transparent) and 1 (fully opaque).
<br><br>
For lines, "steps" specifies whether two adjacent data points are connected with 
a straight (possibly diagonal) line or with first a horizontal and then a vertical line.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#lines" ext:member="#lines" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-listeners"></a><b><a href="source/Observable.html#cfg-Ext.util.Observable-listeners">listeners</a></b> : Object<div class="mdesc"><div class="short">A config object containing one or more event handlers to be added to this&#13;
object during initialization.  This should...</div><div class="long">A config object containing one or more event handlers to be added to this
object during initialization.  This should be a valid listeners config object as specified in the
<a href="output/Ext.util.Observable.html#Ext.util.Observable-addListener" ext:member="addListener" ext:cls="Ext.util.Observable">addListener</a> example for attaching multiple handlers at once.</div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#listeners" ext:member="#listeners" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-overCls"></a><b><a href="source/Component.html#cfg-Ext.Component-overCls">overCls</a></b> : String<div class="mdesc"><div class="short">An optional extra CSS class that will be added to this component's Element when the mouse moves&#13;
over the Element, an...</div><div class="long">An optional extra CSS class that will be added to this component's Element when the mouse moves
over the Element, and removed when the mouse moves out. (defaults to '').  This can be
useful for adding customized "active" or "hover" styles to the component or any of its children using standard CSS rules.</div></div></td><td class="msource"><a href="output/Ext.Component.html#overCls" ext:member="#overCls" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-pageX"></a><b><a href="source/BoxComponent.html#cfg-Ext.BoxComponent-pageX">pageX</a></b> : Number<div class="mdesc">The page level x coordinate for this component if contained within a positioning container.</div></td><td class="msource"><a href="output/Ext.BoxComponent.html#pageX" ext:member="#pageX" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-pageY"></a><b><a href="source/BoxComponent.html#cfg-Ext.BoxComponent-pageY">pageY</a></b> : Number<div class="mdesc">The page level y coordinate for this component if contained within a positioning container.</div></td><td class="msource"><a href="output/Ext.BoxComponent.html#pageY" ext:member="#pageY" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-pies"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-pies">pies</a></b> : Object<div class="mdesc"><div class="short">Flot pies
see also lines


  pies: {
    show: false,
    radius: null,         // or number by px
    labelRadius: n...</div><div class="long">Flot pies
see also lines
<br><br>
<pre>
  pies: {
    show: false,
    radius: null,         // or number by px
    labelRadius: null,    // or number by px
    startAngle: 0,
    fill: true,
    fillColor: null,
    // null or fn or 'value', 'percent', 'label', 'full'
    // fn: (label, value, percent, textValue, pie, serie, options) -> html
    labelFormatter: null, 
    labelStyle: 'font-size: normal; font-weight: bold; color:#545454;',
    bias: [0.3, -1.4, 0.1], // [init, step, threshold]
  }
</pre>
"radius" is the radius of pie. 
If you specify it by number, it passed as the pie radius.
If you specify it by null or nothing, the flot determines it by plot area.
If legend is shown, radius become smaller.
<br><br>
"labelRadius" is the radius or label area.
If you specify it by number, it passed as the label radius.
If you specify it by null or nothing, the flot determines it by pie radius.
<br><br>
"labelFormatter" is the formatter of each series label.
If you specify it by function, like the followings:
<pre>
labelFormatter: function(label, value, percent, textValue, pie, serie, options) {
  return textValue + '%<br><span style="font-size: 75%">' + label + '<br>(' + value + ')</span>';
  
}
</pre>
<li>label: the label of the serie</li>
<li>value: the raw value of the serie</li>
<li>percent: the raw percent value</li>
<li>textValue: the percent to show. you should add '%' after it.</li>
<li>pie: the pie informations to show. it contains the following members.
<pre>
radius labelRadius sumSeries anchorX anchorY labelX labelY startAngle endAngle sliceMiddle
</pre>
</li>
<li>serie: the serie to show in this pie</li>
<li>options: flot options which is parsed</li>
<br><br>
"labelStyle" is the style of label div. You can specify it in .pieLabel class
<br><br>
"bias" is the option to ajust position of small pie.
You specify it as Array.
<li>0: initial value of bias</li>
<li>1: the bias for the next bias</li>
<li>2: threshold to apply bias. if the percent is smaller than it, the pecent will be biased.</li>
If you specify null, bias is disabled.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#pies" ext:member="#pies" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-plugins"></a><b><a href="source/Component.html#cfg-Ext.Component-plugins">plugins</a></b> : Object/Array<div class="mdesc"><div class="short">An object or array of objects that will provide custom functionality for this component.  The only&#13;
requirement for a...</div><div class="long">An object or array of objects that will provide custom functionality for this component.  The only
requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.
When a component is created, if any plugins are available, the component will call the init method on each
plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the
component as needed to provide its functionality.</div></div></td><td class="msource"><a href="output/Ext.Component.html#plugins" ext:member="#plugins" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-points"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-points">points</a></b> : Object<div class="mdesc">flot points
see also lines</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#points" ext:member="#points" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-renderTo"></a><b><a href="source/Component.html#cfg-Ext.Component-renderTo">renderTo</a></b> : Mixed<div class="mdesc"><div class="short">The id of the node, a DOM node or an existing Element that will be the container to render this component into.&#13;
Usin...</div><div class="long">The id of the node, a DOM node or an existing Element that will be the container to render this component into.
Using this config, a call to render() is not required.</div></div></td><td class="msource"><a href="output/Ext.Component.html#renderTo" ext:member="#renderTo" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  "><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.PieFlot-selection"></a><b><a href="source/PieFlot.html#cfg-Ext.ux.PieFlot-selection">selection</a></b> : Object<div class="mdesc">mode is null by default</div></td><td class="msource">PieFlot</td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-series"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-series">series</a></b> : Object<div class="mdesc">flot series option</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#series" ext:member="#series" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-shadowSize"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-shadowSize">shadowSize</a></b> : Number<div class="mdesc">flot shadowSize
"shadowSize" is the default size of shadows in pixels. Set it to 0 to remove shadows.</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#shadowSize" ext:member="#shadowSize" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-sortType"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-sortType">sortType</a></b> : Function<div class="mdesc"><div class="short">The sort type of each column.
It is one of Ext.data.SortTypes 
Default is Ext.data.SortTypes.asFloat
It is used on Ex...</div><div class="long">The sort type of each column.
It is one of <a href="output/Ext.data.SortTypes.html" ext:cls="Ext.data.SortTypes">Ext.data.SortTypes</a> 
Default is <a href="output/Ext.data.SortTypes.asFloat.html" ext:cls="Ext.data.SortTypes.asFloat">Ext.data.SortTypes.asFloat</a>
It is used on <a href="output/Ext.data.Record.create.html" ext:cls="Ext.data.Record.create">Ext.data.Record.create</a></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#sortType" ext:member="#sortType" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-stateId"></a><b><a href="source/Component.html#cfg-Ext.Component-stateId">stateId</a></b> : String<div class="mdesc"><div class="short">The unique id for this component to use for state management purposes (defaults to the component id if one was&#13;
set, ...</div><div class="long">The unique id for this component to use for state management purposes (defaults to the component id if one was
set, otherwise null if the component is using a generated id).
<p>See <a href="output/Ext.Component.html#Ext.Component-stateful" ext:member="stateful" ext:cls="Ext.Component">stateful</a> for an explanation of saving and restoring Component state.</p></div></div></td><td class="msource"><a href="output/Ext.Component.html#stateId" ext:member="#stateId" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-stateful"></a><b><a href="source/Component.html#cfg-Ext.Component-stateful">stateful</a></b> : Boolean<div class="mdesc"><div class="short">A flag which causes the Component to attempt to restore the state of internal properties&#13;
from a saved state on start...</div><div class="long"><p>A flag which causes the Component to attempt to restore the state of internal properties
from a saved state on startup. The component must have either a <a href="output/Ext.Component.html#Ext.Component-stateId" ext:member="stateId" ext:cls="Ext.Component">stateId</a> or <a href="output/Ext.Component.html#Ext.Component-id" ext:member="id" ext:cls="Ext.Component">id</a>
assigned for state to be managed.  Auto-generated ids are not guaranteed to be stable across page
loads and cannot be relied upon to save and restore the same state for a component.<p>
For state saving to work, the state manager's provider must have been set to an implementation
of <a href="output/Ext.state.Provider.html" ext:cls="Ext.state.Provider">Ext.state.Provider</a> which overrides the <a href="output/Ext.state.Provider.html#Ext.state.Provider-set" ext:member="set" ext:cls="Ext.state.Provider">set</a>
and <a href="output/Ext.state.Provider.html#Ext.state.Provider-get" ext:member="get" ext:cls="Ext.state.Provider">get</a> methods to save and recall name/value pairs.
A built-in implementation, <a href="output/Ext.state.CookieProvider.html" ext:cls="Ext.state.CookieProvider">Ext.state.CookieProvider</a> is available.</p>
<p>To set the state provider for the current page:</p>
<pre><code>Ext.state.Manager.setProvider(<b>new</b> Ext.state.CookieProvider());</code></pre>
<p>Components attempt to save state when one of the events listed in the <a href="output/Ext.Component.html#Ext.Component-stateEvents" ext:member="stateEvents" ext:cls="Ext.Component">stateEvents</a>
configuration fires.</p>
<p>You can perform extra processing on state save and restore by attaching handlers to the
<a href="output/Ext.Component.html#Ext.Component-beforestaterestore" ext:member="beforestaterestore" ext:cls="Ext.Component">beforestaterestore</a>, <a href="output/Ext.Component.html#Ext.Component-staterestore" ext:member="staterestore" ext:cls="Ext.Component">staterestore</a>, <a href="output/Ext.Component.html#Ext.Component-beforestatesave" ext:member="beforestatesave" ext:cls="Ext.Component">beforestatesave</a> and <a href="output/Ext.Component.html#Ext.Component-statesave" ext:member="statesave" ext:cls="Ext.Component">statesave</a> events</p></div></div></td><td class="msource"><a href="output/Ext.Component.html#stateful" ext:member="#stateful" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-style"></a><b><a href="source/Component.html#cfg-Ext.Component-style">style</a></b> : String<div class="mdesc"><div class="short">A custom style specification to be applied to this component's Element.  Should be a valid argument to&#13;
Ext.Element.a...</div><div class="long">A custom style specification to be applied to this component's Element.  Should be a valid argument to
<a href="output/Ext.Element.html#Ext.Element-applyStyles" ext:member="applyStyles" ext:cls="Ext.Element">Ext.Element.applyStyles</a>.</div></div></td><td class="msource"><a href="output/Ext.Component.html#style" ext:member="#style" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-threshold"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-threshold">threshold</a></b> : Object<div class="mdesc"><div class="short">flot threshold
This is not supported in flot 0.5

  threshold: {
    below: number
    color: color
  }

"threshold" ...</div><div class="long">flot threshold
This is not supported in flot 0.5
<pre>
  threshold: {
    below: number
    color: color
  }
</pre>
"threshold" specifies that the data points below "below" should be
drawn with the specified color. This makes it easy to mark points
below 0, e.g. for budget data.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#threshold" ext:member="#threshold" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  "><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.PieFlot-tooltip"></a><b><a href="source/PieFlot.html#cfg-Ext.ux.PieFlot-tooltip">tooltip</a></b> : Bool/String/Object<div class="mdesc">false by default</div></td><td class="msource">PieFlot</td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-tooltipEvent"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-tooltipEvent">tooltipEvent</a></b> : String<div class="mdesc">The event to show tooltip. Default is 'plothover'.
<li>plothover 
<li>plotclick
<li>all (plothover and plotclick)</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#tooltipEvent" ext:member="#tooltipEvent" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-type"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-type">type</a></b> : String<div class="mdesc">Base type of each column
It is used on <a href="output/Ext.data.Record.create.html" ext:cls="Ext.data.Record.create">Ext.data.Record.create</a>
'auto', 'string' 'int',  'float', 'boolean',  'date'</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#type" ext:member="#type" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-width"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-width">width</a></b> : Integer/String<div class="mdesc">Width of this Ext.ux.Flot instance
Not specifyed, the width is same as parent's.</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#width" ext:member="#width" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-x"></a><b><a href="source/BoxComponent.html#cfg-Ext.BoxComponent-x">x</a></b> : Number<div class="mdesc">The local x (left) coordinate for this component if contained within a positioning container.</div></td><td class="msource"><a href="output/Ext.BoxComponent.html#x" ext:member="#x" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-x2axis"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-x2axis">x2axis</a></b> : Object<div class="mdesc">flot x2axis
see also xaxis</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#x2axis" ext:member="#x2axis" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-xaxis"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-xaxis">xaxis</a></b> : Object<div class="mdesc"><div class="short">flot xaxis

  xaxis, yaxis, x2axis, y2axis: {
    mode: null or "time"
    min: null or number
    max: null or numbe...</div><div class="long">flot xaxis
<pre>
  xaxis, yaxis, x2axis, y2axis: {
    mode: null or "time"
    min: null or number
    max: null or number
    autoscaleMargin: null or number
    labelWidth: null or number
    labelHeight: null or number

    ticks: null or number or ticks array or (fn: range -> ticks array)
    tickSize: number or array
    minTickSize: number or array
    tickFormatter: (fn: number, object -> string) or string
    tickDecimals: null or number
  }
</pre>
All axes have the same kind of options. The "mode" option determines how the data is interpreted, 
the default of null means as decimal numbers. 
Use "time" for time series data, see the next section.
<br><br>
The options "min"/"max" are the precise minimum/maximum value on the scale. 
If you don't specify either of them, a value will automatically
be chosen based on the minimum/maximum data values.
<br><br>
The "autoscaleMargin" is a bit esoteric: it's the fraction of margin
that the scaling algorithm will add to avoid that the outermost points
ends up on the grid border. 
Note that this margin is only applied when a min or max value is not explicitly set. 
If a margin is specified, the plot will furthermore extend the axis end-point to the nearest whole tick. 
The default value is "null" for the x axis and
0.02 for the y axis which seems appropriate for most cases.
<br><br>
"labelWidth" and "labelHeight" specifies the maximum size of the tick labels in pixels. 
They're useful in case you need to align several plots.
<br><br>
The rest of the options deal with the ticks.
<br><br>
If you don't specify any ticks, a tick generator algorithm will make some for you. 
The algorithm has two passes. 
It first estimates how many ticks would be reasonable and uses this number to compute a nice round tick interval size. 
Then it generates the ticks.
<br><br>
You can specify how many ticks the algorithm aims for by setting "ticks" to a number. 
The algorithm always tries to generate reasonably round tick values so even if you ask for three ticks, 
you might get five if that fits better with the rounding. 
If you don't want any ticks at all, set "ticks" to 0 or an empty array.
<br><br>
Another option is to skip the rounding part and directly set the tick interval size with "tickSize". 
If you set it to 2, you'll get ticks at 2, 4, 6, etc. 
Alternatively, you can specify that you just don't want
ticks at a size less than a specific tick size with "minTickSize".
Note that for time series, the format is an array like [2, "month"], see the next section.
<br><br>
If you want to completely override the tick algorithm, you can specify an array for "ticks", either like this:
<pre>
   ticks: [0, 1.2, 2.4]
</pre>
Or like this where the labels are also customized:
<pre>
   ticks: [[0, "zero"], [1.2, "one mark"], [2.4, "two marks"]]
</pre>
You can mix the two if you like.
<br><br>
For extra flexibility you can specify a function as the "ticks" parameter. 
The function will be called with an object with the axis min and max and should return a ticks array. 
Here's a simplistic tick generator that spits out intervals of pi, 
suitable for use on the x axis for trigonometric functions:
<pre>
  function piTickGenerator(axis) {
    var res = [], i = Math.floor(axis.min / Math.PI);
    do {
      var v = i * Math.PI;
      res.push([v, i + "\u03c0"]);
      ++i;
    } while (v < axis.max);
    
    return res;
  }
</pre>
You can control how the ticks look like with "tickDecimals", the number of decimals to display (default is auto-detected).
<br><br>
Alternatively, for ultimate control over how ticks look like you can provide a function to "tickFormatter". 
The function is passed two parameters, the tick value and an "axis" object with information, 
and should return a string. The default formatter looks like this:
<pre>
  function formatter(val, axis) {
    return val.toFixed(axis.tickDecimals);
  }
</pre>
The axis object has "min" and "max" with the range of the axis,
"tickDecimals" with the number of decimals to round the value to and
"tickSize" with the size of the interval between ticks as calculated
by the automatic axis scaling algorithm (or specified by you). 
Here's an example of a custom formatter:
<pre>
  function suffixFormatter(val, axis) {
    if (val > 1000000)
      return (val / 1000000).toFixed(axis.tickDecimals) + " MB";
    else if (val > 1000)
      return (val / 1000).toFixed(axis.tickDecimals) + " kB";
    else
      return val.toFixed(axis.tickDecimals) + " B";
  }
</pre>
<hr>
Time series data
<br><br>
Time series are a bit more difficult than scalar data because calendars don't follow a simple base 10 system. 
For many cases, Flot abstracts most of this away, but it can still be a bit difficult to
get the data into Flot. So we'll first discuss the data format.
<br><br>
The time series support in Flot is based on Javascript timestamps,
i.e. everywhere a time value is expected or handed over, a Javascript timestamp number is used. 
This is a number, not a Date object. 
A Javascript timestamp is the number of milliseconds since January 1,
1970 00:00:00 UTC. This is almost the same as Unix timestamps, except it's in milliseconds, so remember to multiply by 1000!
<br><br>
You can see a timestamp like this
<pre>
  alert((new Date()).getTime())
</pre>
Normally you want the timestamps to be displayed according to a certain time zone, 
usually the time zone in which the data has been produced. 
However, Flot always displays timestamps according to UTC.
It has to as the only alternative with core Javascript is to interpret
the timestamps according to the time zone that the visitor is in,
which means that the ticks will shift unpredictably with the time zone
and daylight savings of each visitor.
<br><br>
So given that there's no good support for custom time zones in Javascript, 
you'll have to take care of this server-side.
<br><br>
The easiest way to think about it is to pretend that the data production time zone is UTC, even if it isn't. 
So if you have a datapoint at 2002-02-20 08:00, you can generate a timestamp for eight o'clock UTC even if it really happened eight o'clock UTC+0200.
<br><br>
In PHP you can get an appropriate timestamp with 'strtotime("2002-02-20 UTC") * 1000', 
in Python with 'calendar.timegm(datetime_object.timetuple()) * 1000', 
in .NET with something like:
<pre>
  public static int GetJavascriptTimestamp(System.DateTime input)
  {
    System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse("1/1/1970").Ticks);
    System.DateTime time = input.Subtract(span);
    return (long)(time.Ticks / 10000);
  }
</pre>
Javascript also has some support for parsing date strings, 
so it is possible to generate the timestamps manually client-side.
<br><br>
If you've already got the real UTC timestamp, it's too late to use the pretend trick described above. 
But you can fix up the timestamps by adding the time zone offset, e.g. 
for UTC+0200 you would add 2 hours to the UTC timestamp you got. 
Then it'll look right on the plot. 
Most programming environments have some means of getting the timezone
offset for a specific date (note that you need to get the offset for
each individual timestamp to account for daylight savings).
<br><br>
Once you've gotten the timestamps into the data and specified "time" as the axis mode, 
Flot will automatically generate relevant ticks and format them. 
As always, you can tweak the ticks via the "ticks" option
<br><br>
just remember that the values should be timestamps (numbers), not Date objects.
<br><br>
Tick generation and formatting can also be controlled separately through the following axis options:
<pre>
  minTickSize: array
  timeformat: null or format string
  monthNames: null or array of size 12 of strings
</pre>
Here "timeformat" is a format string to use. You might use it like this:
<pre>
  xaxis: {
    mode: "time"
    timeformat: "%y/%m/%d"
  }
</pre>
This will result in tick labels like "2000/12/24". 
The following specifiers are supported
<pre>
  %h': hours
  %H': hours (left-padded with a zero)
  %M': minutes (left-padded with a zero)
  %S': seconds (left-padded with a zero)
  %d': day of month (1-31)
  %m': month (1-12)
  %y': year (four digits)
  %b': month name (customizable)
</pre>
You can customize the month names with the "monthNames" option. 
For instance, for Danish you might specify:
<pre>
  monthNames: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"]
</pre>
The format string and month names are used by a very simple built-in format function that takes a date object, 
a format string (and optionally an array of month names) and returns the formatted string. 
If needed, you can access it as $.plot.formatDate(date, formatstring, monthNames) 
or even replace it with another more advanced function from a date library if you're feeling adventurous.
<br><br>
If everything else fails, you can control the formatting by specifying a custom tick formatter function as usual. 
Here's a simple example which will format December 24 as 24/12:
<pre>
  tickFormatter: function (val, axis) {
    var d = new Date(val);
    return d.getUTCDate() + "/" + (d.getUTCMonth() + 1);
  }
</pre>
Note that for the time mode "tickSize" and "minTickSize" are a bit
special in that they are arrays on the form "[value, unit]" where unit
is one of "second", "minute", "hour", "day", "month" and "year". 
So you can specify
<pre>
  minTickSize: [1, "month"]
</pre>
to get a tick interval size of at least 1 month and correspondingly,
if axis.tickSize is [2, "day"] in the tick formatter, the ticks have been produced with two days in-between.</div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#xaxis" ext:member="#xaxis" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-xtype"></a><b><a href="source/Component.html#cfg-Ext.Component-xtype">xtype</a></b> : String<div class="mdesc"><div class="short">The registered xtype to create. This config option is not used when passing&#13;
a config object into a constructor. This...</div><div class="long">The registered xtype to create. This config option is not used when passing
a config object into a constructor. This config option is used only when
lazy instantiation is being used, and a child item of a Container is being
specified not as a fully instantiated Component, but as a <i>Component config
object</i>. The xtype will be looked up at render time up to determine what
type of child Component to create.<br><br>
The predefined xtypes are listed <a href="output/Ext.Component.html" ext:cls="Ext.Component">here</a>.
<br><br>
If you subclass Components to create your own Components, you may register
them using <a href="output/Ext.ComponentMgr.html#Ext.ComponentMgr-registerType" ext:member="registerType" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr.registerType</a> in order to be able to
take advantage of lazy instantiation and rendering.</div></div></td><td class="msource"><a href="output/Ext.Component.html#xtype" ext:member="#xtype" ext:cls="Ext.Component">Component</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-y"></a><b><a href="source/BoxComponent.html#cfg-Ext.BoxComponent-y">y</a></b> : Number<div class="mdesc">The local y (top) coordinate for this component if contained within a positioning container.</div></td><td class="msource"><a href="output/Ext.BoxComponent.html#y" ext:member="#y" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-y2axis"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-y2axis">y2axis</a></b> : Object<div class="mdesc">flot y2axis
see also xaxis</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#y2axis" ext:member="#y2axis" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="config-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-yaxis"></a><b><a href="source/Flot.html#cfg-Ext.ux.Flot-yaxis">yaxis</a></b> : Object<div class="mdesc">flot yaxis
see also xaxis</div></td><td class="msource"><a href="output/Ext.ux.Flot.html#yaxis" ext:member="#yaxis" ext:cls="Ext.ux.Flot">Flot</a></td></tr></tbody></table><a id="Ext.ux.PieFlot-props"></a><h2>Public Properties</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">Property</th><th class="msource-header">Defined By</th></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-baseRanges"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-baseRanges">baseRanges</a></b> : Object
The range for 100%
This is the format for 'plotselect'.<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#baseRanges" ext:member="#baseRanges" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-clickItem"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-clickItem">clickItem</a></b> : Object
Item of latest 'plotclick' event<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#clickItem" ext:member="#clickItem" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  "><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.PieFlot-contextMenu"></a><b><a href="source/PieFlot.html#prop-Ext.ux.PieFlot-contextMenu">contextMenu</a></b> : Array
just 'property'<div class="mdesc"></div></td><td class="msource">PieFlot</td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-currentRanges"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-currentRanges">currentRanges</a></b> : Object
The range of current state (not 100%)
This is the format for 'plotselect'.<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#currentRanges" ext:member="#currentRanges" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  "><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.PieFlot-datapointContextMenu"></a><b><a href="source/PieFlot.html#prop-Ext.ux.PieFlot-datapointContextMenu">datapointContextMenu</a></b> : Array 
disable by default<div class="mdesc"></div></td><td class="msource">PieFlot</td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-disableTooltip"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-disableTooltip">disableTooltip</a></b> : Bool
Current status to disable tooltip<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#disableTooltip" ext:member="#disableTooltip" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-disabled"></a><b><a href="source/Component.html#prop-Ext.Component-disabled">disabled</a></b> : Boolean<div class="mdesc">True if this component is disabled. Read-only.</div></td><td class="msource"><a href="output/Ext.Component.html#disabled" ext:member="#disabled" ext:cls="Ext.Component">Component</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-flot"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-flot">flot</a></b> : Object
The flot instance which Ext Flot instance hold on. 
This is typically read-only. Please access by Ext Flot methods.<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#flot" ext:member="#flot" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hidden"></a><b><a href="source/Component.html#prop-Ext.Component-hidden">hidden</a></b> : Boolean<div class="mdesc">True if this component is hidden. Read-only.</div></td><td class="msource"><a href="output/Ext.Component.html#hidden" ext:member="#hidden" ext:cls="Ext.Component">Component</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-hoverItem"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-hoverItem">hoverItem</a></b> : Object 
Item of latest 'plothover' event<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#hoverItem" ext:member="#hoverItem" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-initialConfig"></a><b><a href="source/Component.html#prop-Ext.Component-initialConfig">initialConfig</a></b> : Object<div class="mdesc">This Component's initial configuration specification. Read-only.</div></td><td class="msource"><a href="output/Ext.Component.html#initialConfig" ext:member="#initialConfig" ext:cls="Ext.Component">Component</a></td></tr><tr class="property-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-ownerCt"></a><b><a href="source/Component.html#prop-Ext.Component-ownerCt">ownerCt</a></b> : Ext.Container<div class="mdesc"><div class="short">The component's owner Ext.Container (defaults to undefined, and is set automatically when&#13;
the component is added to ...</div><div class="long">The component's owner <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a> (defaults to undefined, and is set automatically when
the component is added to a container).  Read-only.</div></div></td><td class="msource"><a href="output/Ext.Component.html#ownerCt" ext:member="#ownerCt" ext:cls="Ext.Component">Component</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-propertyCmp"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-propertyCmp">propertyCmp</a></b> : Ext.Component
This is Ext.Component instance of property grid. 
If you hook displaying it, listen 'show' event of propertyCmp 
You can replace and customize property grid.
&lt;pre&gt;
var extflot = new Ext.ux.ExtFlot({
  ...
});
extflot.propertyCmp = new Ext.Window({
  title: 'My Proeprty'
});
&lt;/pre&gt;<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#propertyCmp" ext:member="#propertyCmp" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-rendered"></a><b><a href="source/Component.html#prop-Ext.Component-rendered">rendered</a></b> : Boolean<div class="mdesc">True if this component has been rendered. Read-only.</div></td><td class="msource"><a href="output/Ext.Component.html#rendered" ext:member="#rendered" ext:cls="Ext.Component">Component</a></td></tr><tr class="property-row  inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-store"></a><b><a href="source/Flot.html#prop-Ext.ux.Flot-store">store</a></b> : Ext.data.JsonStore
Mirrors of the series data<div class="mdesc"></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#store" ext:member="#store" ext:cls="Ext.ux.Flot">Flot</a></td></tr></tbody></table><a id="Ext.ux.PieFlot-methods"></a><h2>Public Methods</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">Method</th><th class="msource-header">Defined By</th></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-addClass"></a><b><a href="source/Component.html#method-Ext.Component-addClass">addClass</a></b>(&nbsp;<code>string&nbsp;cls</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Adds a CSS class to the component's underlying element.</div><div class="long">Adds a CSS class to the component's underlying element.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>cls</code> : string<div class="sub-desc">The CSS class name to add</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#addClass" ext:member="#addClass" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-addEvents"></a><b><a href="source/Observable.html#method-Ext.util.Observable-addEvents">addEvents</a></b>(&nbsp;<code>Object&nbsp;object</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Used to define events on this Observable</div><div class="long">Used to define events on this Observable<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>object</code> : Object<div class="sub-desc">The object with the events defined</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#addEvents" ext:member="#addEvents" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-addListener"></a><b><a href="source/Observable.html#method-Ext.util.Observable-addListener">addListener</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Function&nbsp;handler</code>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;scope</code>]</span>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;options</code>]</span>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Appends an event handler to this component</div><div class="long">Appends an event handler to this component<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc">The type of event to listen for</div></li><li><code>handler</code> : Function<div class="sub-desc">The method the event invokes</div></li><li><code>scope</code> : Object<div class="sub-desc">(optional) The scope in which to execute the handler
function. The handler function's "this" context.</div></li><li><code>options</code> : Object<div class="sub-desc">(optional) An object containing handler configuration
properties. This may contain any of the following properties:<ul>
<li><b>scope</b> : Object<p class="sub-desc">The scope in which to execute the handler function. The handler function's "this" context.</p></li>
<li><b>delay</b> : Number<p class="sub-desc">The number of milliseconds to delay the invocation of the handler after the event fires.</p></li>
<li><b>single</b> : Boolean<p class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</p></li>
<li><b>buffer</b> : Number<p class="sub-desc">Causes the handler to be scheduled to run in an <a href="output/Ext.util.DelayedTask.html" ext:cls="Ext.util.DelayedTask">Ext.util.DelayedTask</a> delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p></li>
</ul><br>
<p>
<b>Combining Options</b><br>
Using the options argument, it is possible to combine different types of listeners:<br>
<br>
A normalized, delayed, one-time listener that auto stops the event and passes a custom argument (forumId)
<pre><code>el.on(<em>'click'</em>, this.onClick, this, {
    single: true,
    delay: 100,
    forumId: 4
});</code></pre>
<p>
<b>Attaching multiple handlers in 1 call</b><br>
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.
<p>
<pre><code>foo.on({
    <em>'click'</em> : {
        fn: this.onClick,
        scope: this,
        delay: 100
    },
    <em>'mouseover'</em> : {
        fn: this.onMouseOver,
        scope: this
    },
    <em>'mouseout'</em> : {
        fn: this.onMouseOut,
        scope: this
    }
});</code></pre>
<p>
Or a shorthand syntax:<br>
<pre><code>foo.on({
    <em>'click'</em> : this.onClick,
    <em>'mouseover'</em> : this.onMouseOver,
    <em>'mouseout'</em> : this.onMouseOut,
     scope: this
});</code></pre></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#addListener" ext:member="#addListener" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-addSelected"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-addSelected">addSelected</a></b>(&nbsp;<code>Object&nbsp;seris</code>,&nbsp;<code>Object&nbsp;datapoint</code>&nbsp;)
    :
                                        Boolean<div class="mdesc"><div class="short">Add a datapoint to selected datapoints</div><div class="long">Add a datapoint to selected datapoints<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>seris</code> : Object<div class="sub-desc">the owner serie of datapoint</div></li><li><code>datapoint</code> : Object<div class="sub-desc">datapoint to add</div></li></ul><strong>Returns:</strong><ul><li><code>Boolean</code><div class="sub-desc">really the datapoint is added</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#addSelected" ext:member="#addSelected" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-appendData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-appendData">appendData</a></b>(&nbsp;<code>Object/Array&nbsp;data</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Insert a new serie that built from data into bottom of series array</div><div class="long">Insert a new serie that built from data into bottom of series array<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>data</code> : Object/Array<div class="sub-desc">serie data to insert</div></li><li><code>series</code> : Object<div class="sub-desc">base serie options to pass setupData()</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#appendData" ext:member="#appendData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-appendSeries"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-appendSeries">appendSeries</a></b>(&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Insert a new serie into the bottom of series</div><div class="long">Insert a new serie into the bottom of series<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : Object<div class="sub-desc">the serie to insert</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#appendSeries" ext:member="#appendSeries" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-applyToMarkup"></a><b><a href="source/Component.html#method-Ext.Component-applyToMarkup">applyToMarkup</a></b>(&nbsp;<code>String/HTMLElement&nbsp;el</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Apply this component to existing markup that is valid. With this function, no call to render() is required.</div><div class="long">Apply this component to existing markup that is valid. With this function, no call to render() is required.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>el</code> : String/HTMLElement<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#applyToMarkup" ext:member="#applyToMarkup" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-bindGrid"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-bindGrid">bindGrid</a></b>(&nbsp;<code>Ext.grid.GridPanel&nbsp;grid</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Relate Ext.ux.Flot and Ext.grid.GridPanel</div><div class="long">Relate Ext.ux.Flot and Ext.grid.GridPanel<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>grid</code> : Ext.grid.GridPanel<div class="sub-desc">grid to relate with Ext.ux.Flot instance</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#bindGrid" ext:member="#bindGrid" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-clearCrosshair"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-clearCrosshair">clearCrosshair</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot clearCrosshair 
This is not supported in flot 0.5.

Clear the crosshair.</div><div class="long">Wrapper of flot clearCrosshair 
This is not supported in flot 0.5.
<br><br>
Clear the crosshair.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#clearCrosshair" ext:member="#clearCrosshair" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-clearSelection"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-clearSelection">clearSelection</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot clearSelection
Clear the selection rectangle. Pass in true to avoid getting a "plotunselected" event.</div><div class="long">Wrapper of flot clearSelection
Clear the selection rectangle. Pass in true to avoid getting a "plotunselected" event.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#clearSelection" ext:member="#clearSelection" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-clipData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-clipData">clipData</a></b>(&nbsp;<code>Object&nbsp;ranges</code>&nbsp;)
    :
                                        Array<div class="mdesc"><div class="short">Gather datapoints within range</div><div class="long">Gather datapoints within range<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>ranges</code> : Object<div class="sub-desc">ranges contain 'from' and 'to' in following members.
Note that the unit of 'from' and 'to' is same with each serie
xaxis yaxis x2axis y2axis
from to</div></li></ul><strong>Returns:</strong><ul><li><code>Array</code><div class="sub-desc">datapoint within range of each serie</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#clipData" ext:member="#clipData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-cloneConfig"></a><b><a href="source/Component.html#method-Ext.Component-cloneConfig">cloneConfig</a></b>(&nbsp;<code>Object&nbsp;overrides</code>&nbsp;)
    :
                                        Ext.Component<div class="mdesc"><div class="short">Clone the current component using the original config values passed into this instance by default.</div><div class="long">Clone the current component using the original config values passed into this instance by default.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>overrides</code> : Object<div class="sub-desc">A new config containing any properties to override in the cloned version.
An id property can be passed on this object, otherwise one will be generated to avoid duplicates.</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">clone The cloned copy of this component</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#cloneConfig" ext:member="#cloneConfig" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable "><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.PieFlot-createSeries"></a><b><a href="source/PieFlot.html#method-Ext.ux.PieFlot-createSeries">createSeries</a></b>(&nbsp;<code>Ext.data.Store&nbsp;store</code>,&nbsp;<code>String&nbsp;xField</code>,&nbsp;<code>String&nbsp;yField</code>&nbsp;)
    :
                                        Array<div class="mdesc"><div class="short">Convert the data of Ext.data.JsonStore to for pie flot.</div><div class="long">Convert the data of <a href="output/Ext.data.JsonStore.html" ext:cls="Ext.data.JsonStore">Ext.data.JsonStore</a> to for pie flot.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>store</code> : Ext.data.Store<div class="sub-desc">data store to use
If you specify nothing, this.store is used.</div></li><li><code>xField</code> : String<div class="sub-desc">The field name for x-axis 
It is mathed the order of dataIndex, name.
If you specify nothing, store.xField is used.</div></li><li><code>yField</code> : String<div class="sub-desc">The field name for y-axis 
It is mathed the order of dataIndex, name.
If you specify nothing, store.yField is used.</div></li></ul><strong>Returns:</strong><ul><li><code>Array</code><div class="sub-desc">data array which can be used by flot.</div></li></ul></div></div></div></td><td class="msource">PieFlot</td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-createStoreData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-createStoreData">createStoreData</a></b>(&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    :
                                        Object<div class="mdesc"><div class="short">Convert the series data of flot to object for Ext.data.JsonStore. 
The return value can be read by Ext.data.JsonStore...</div><div class="long">Convert the series data of flot to object for <a href="output/Ext.data.JsonStore.html" ext:cls="Ext.data.JsonStore">Ext.data.JsonStore</a>. 
The return value can be read by Ext.data.JsonStore.loadData().
Its contents same format with HttpResponse. 
It includes 'metaData'. The data entity (root) is 'data'.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : Object<div class="sub-desc">The series to create data for Ext.data.JsonStore.
If you specify notihing, Ext.ux.Flot get them from getData()</div></li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">Ext.data.JsonStore Object for loadData()</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#createStoreData" ext:member="#createStoreData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-destroy"></a><b><a href="source/Component.html#method-Ext.Component-destroy">destroy</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Destroys this component by purging any event listeners, removing the component's element from the DOM,&#13;
removing the ...</div><div class="long">Destroys this component by purging any event listeners, removing the component's element from the DOM,
removing the component from its <a href="output/Ext.Container.html" ext:cls="Ext.Container">Ext.Container</a> (if applicable) and unregistering it from
<a href="output/Ext.ComponentMgr.html" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr</a>.  Destruction is generally handled automatically by the framework and this method
should usually not need to be called directly.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#destroy" ext:member="#destroy" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-disable"></a><b><a href="source/Component.html#method-Ext.Component-disable">disable</a></b>()
    :
                                        Ext.Component<div class="mdesc"><div class="short">Disable this component.</div><div class="long">Disable this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#disable" ext:member="#disable" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-draw"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-draw">draw</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot draw

Redraws the canvas.</div><div class="long">Wrapper of flot draw
<br><br>
Redraws the canvas.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#draw" ext:member="#draw" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-enable"></a><b><a href="source/Component.html#method-Ext.Component-enable">enable</a></b>()
    :
                                        Ext.Component<div class="mdesc"><div class="short">Enable this component.</div><div class="long">Enable this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#enable" ext:member="#enable" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-findParentBy"></a><b><a href="source/Component.html#method-Ext.Component-findParentBy">findParentBy</a></b>(&nbsp;<code>Function&nbsp;fcn</code>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;scope</code>]</span>&nbsp;)
    :
                                        Ext.Container<div class="mdesc"><div class="short">Find a container above this component at any level by a custom function. If the passed function returns&#13;
true, the co...</div><div class="long">Find a container above this component at any level by a custom function. If the passed function returns
true, the container will be returned. The passed function is called with the arguments (container, this component).<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>fcn</code> : Function<div class="sub-desc"></div></li><li><code>scope</code> : Object<div class="sub-desc">(optional)</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.Container</code><div class="sub-desc">The first Container for which the custom function returns true</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#findParentBy" ext:member="#findParentBy" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-findParentByType"></a><b><a href="source/Component.html#method-Ext.Component-findParentByType">findParentByType</a></b>(&nbsp;<code>String/Class&nbsp;xtype</code>&nbsp;)
    :
                                        Ext.Container<div class="mdesc"><div class="short">Find a container above this component at any level by xtype or class</div><div class="long">Find a container above this component at any level by xtype or class<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>xtype</code> : String/Class<div class="sub-desc">The xtype string for a component, or the class of the component directly</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.Container</code><div class="sub-desc">The first Container which matches the given xtype or class</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#findParentByType" ext:member="#findParentByType" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-findSeries"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-findSeries">findSeries</a></b>(&nbsp;<code>String&nbsp;name</code>&nbsp;)
    :
                                        Object<div class="mdesc"><div class="short">Search a serie</div><div class="long">Search a serie<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>name</code> : String<div class="sub-desc">serie name to find</div></li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">found serie (null means not found)</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#findSeries" ext:member="#findSeries" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-fireEvent"></a><b><a href="source/Observable.html#method-Ext.util.Observable-fireEvent">fireEvent</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Object...&nbsp;args</code>&nbsp;)
    :
                                        Boolean<div class="mdesc"><div class="short">Fires the specified event with the passed parameters (minus the event name).</div><div class="long">Fires the specified event with the passed parameters (minus the event name).<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc"></div></li><li><code>args</code> : Object...<div class="sub-desc">Variable number of parameters are passed to handlers</div></li></ul><strong>Returns:</strong><ul><li><code>Boolean</code><div class="sub-desc">returns false if any of the handlers return false otherwise it returns true</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#fireEvent" ext:member="#fireEvent" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-focus"></a><b><a href="source/Component.html#method-Ext.Component-focus">focus</a></b>(&nbsp;<span title="Optional" class="optional">[<code>Boolean&nbsp;selectText</code>]</span>,&nbsp;<span title="Optional" class="optional">[<code>Boolean/Number&nbsp;delay</code>]</span>&nbsp;)
    :
                                        Ext.Component<div class="mdesc"><div class="short">Try to focus this component.</div><div class="long">Try to focus this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>selectText</code> : Boolean<div class="sub-desc">(optional) If applicable, true to also select the text in this component</div></li><li><code>delay</code> : Boolean/Number<div class="sub-desc">(optional) Delay the focus this number of milliseconds (true for 10 milliseconds)</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#focus" ext:member="#focus" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getAxes"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getAxes">getAxes</a></b>()
    :
                                        Object<div class="mdesc"><div class="short">Wrapper of flot getAxes 

Gets an object with the axes settings as { xaxis, yaxis, x2axis, y2axis }. 
Various things ...</div><div class="long">Wrapper of flot getAxes 
<br><br>
Gets an object with the axes settings as { xaxis, yaxis, x2axis, y2axis }. 
Various things are stuffed inside an axis object, e.g.
you could use getAxes().xaxis.ticks to find out what the ticks are for the xaxis.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">axis informations (xaxis yaxis x2axis y2axis)</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getAxes" ext:member="#getAxes" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-getBox"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-getBox">getBox</a></b>(&nbsp;<span title="Optional" class="optional">[<code>Boolean&nbsp;local</code>]</span>&nbsp;)
    :
                                        Object<div class="mdesc"><div class="short">Gets the current box measurements of the component's underlying element.</div><div class="long">Gets the current box measurements of the component's underlying element.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>local</code> : Boolean<div class="sub-desc">(optional) If true the element's left and top are returned instead of page XY (defaults to false)</div></li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">box An object in the format {x, y, width, height}</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#getBox" ext:member="#getBox" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getCanvas"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getCanvas">getCanvas</a></b>()
    :
                                        Object<div class="mdesc"><div class="short">Wrapper of flot getCanvas 

Returns the canvas used for drawing in case you need to hack on it yourself. 
You'll prob...</div><div class="long">Wrapper of flot getCanvas 
<br><br>
Returns the canvas used for drawing in case you need to hack on it yourself. 
You'll probably need to get the plot offset too.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">canvas</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getCanvas" ext:member="#getCanvas" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getData">getData</a></b>()
    :
                                        Array<div class="mdesc"><div class="short">Wrapper of flot getData

Returns an array of the data series currently used on normalized
form with missing settings ...</div><div class="long">Wrapper of flot getData
<br><br>
Returns an array of the data series currently used on normalized
form with missing settings filled in according to the global
options. So for instance to find out what color Flot has assigned
to the data series, you could do this:
<pre>
var series = plot.getData();
for (var i = 0; i < series.length; ++i)
  alert(series[i].color);
</pre><div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Array</code><div class="sub-desc">current series Array which the Ext.ux.Flot instance holds</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getData" ext:member="#getData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-getEl"></a><b><a href="source/Component.html#method-Ext.Component-getEl">getEl</a></b>()
    :
                                        Ext.Element<div class="mdesc"><div class="short">Returns the underlying Ext.Element.</div><div class="long">Returns the underlying <a href="output/Ext.Element.html" ext:cls="Ext.Element">Ext.Element</a>.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.Element</code><div class="sub-desc">The element</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#getEl" ext:member="#getEl" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-getId"></a><b><a href="source/Component.html#method-Ext.Component-getId">getId</a></b>()
    :
                                        String<div class="mdesc"><div class="short">Returns the id of this component.</div><div class="long">Returns the id of this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>String</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#getId" ext:member="#getId" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-getItemId"></a><b><a href="source/Component.html#method-Ext.Component-getItemId">getItemId</a></b>()
    :
                                        String<div class="mdesc"><div class="short">Returns the item id of this component.</div><div class="long">Returns the item id of this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>String</code><div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#getItemId" ext:member="#getItemId" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getPlotOffset"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getPlotOffset">getPlotOffset</a></b>()
    :
                                        Object<div class="mdesc"><div class="short">Wrapper of flot getPlotOffset 

Gets the offset that the grid has within the canvas as an object
with distances from ...</div><div class="long">Wrapper of flot getPlotOffset 
<br><br>
Gets the offset that the grid has within the canvas as an object
with distances from the canvas edges as "left", "right", "top", "bottom". 
I.e., if you draw a circle on the canvas with the center placed at (left, top), 
its center will be at the top-most, left corner of the grid.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">offset informations of plotting area (left, bottom, right, top)</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getPlotOffset" ext:member="#getPlotOffset" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-getPosition"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-getPosition">getPosition</a></b>(&nbsp;<span title="Optional" class="optional">[<code>Boolean&nbsp;local</code>]</span>&nbsp;)
    :
                                        Array<div class="mdesc"><div class="short">Gets the current XY position of the component's underlying element.</div><div class="long">Gets the current XY position of the component's underlying element.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>local</code> : Boolean<div class="sub-desc">(optional) If true the element's left and top are returned instead of page XY (defaults to false)</div></li></ul><strong>Returns:</strong><ul><li><code>Array</code><div class="sub-desc">The XY position of the element (e.g., [100, 200])</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#getPosition" ext:member="#getPosition" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getRanges"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getRanges">getRanges</a></b>()
    :
                                        range<div class="mdesc"><div class="short">Get current display range</div><div class="long">Get current display range<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>range</code><div class="sub-desc">of display</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getRanges" ext:member="#getRanges" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getSelected"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getSelected">getSelected</a></b>()
    :
                                        Array<div class="mdesc"><div class="short">Return the information of selected datapoints by Array
The Array contain series and datapoints

[{
  series: 
  datap...</div><div class="long">Return the information of selected datapoints by Array
The Array contain series and datapoints
<pre>
[{
  series: <series>
  datapoints: [[<x>, <y>], ...]
}, ...]
</pre><div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Array</code><div class="sub-desc">selected datapoints information</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getSelected" ext:member="#getSelected" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getSelectedRecords"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getSelectedRecords">getSelectedRecords</a></b>(&nbsp;<code>Object&nbsp;selected</code>&nbsp;)
    :
                                        Array<div class="mdesc"><div class="short">Create Ext.data.Record from selected datapoints</div><div class="long">Create <a href="output/Ext.data.Record.html" ext:cls="Ext.data.Record">Ext.data.Record</a> from selected datapoints<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>selected</code> : Object<div class="sub-desc">datapoints are got by getSelected()</div></li></ul><strong>Returns:</strong><ul><li><code>Array</code><div class="sub-desc">datapoints by {@link Ext.data.Record}</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getSelectedRecords" ext:member="#getSelectedRecords" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getSelectionAction"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getSelectionAction">getSelectionAction</a></b>()
    :
                                        String<div class="mdesc"><div class="short">Get current action of range selection</div><div class="long">Get current action of range selection<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>String</code><div class="sub-desc">'select' or 'zoom' or 'move'</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getSelectionAction" ext:member="#getSelectionAction" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-getSize"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-getSize">getSize</a></b>()
    :
                                        Object<div class="mdesc"><div class="short">Gets the current size of the component's underlying element.</div><div class="long">Gets the current size of the component's underlying element.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Object</code><div class="sub-desc">An object containing the element's size {width: (element width), height: (element height)}</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#getSize" ext:member="#getSize" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-getStore"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-getStore">getStore</a></b>()
    :
                                        Ext.data.JsonStore<div class="mdesc"><div class="short">Get the store which Ext.ux.Flot instance holds.</div><div class="long">Get the store which Ext.ux.Flot instance holds.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.data.JsonStore</code><div class="sub-desc">JsonStore</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#getStore" ext:member="#getStore" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-getXType"></a><b><a href="source/Component.html#method-Ext.Component-getXType">getXType</a></b>()
    :
                                        String<div class="mdesc"><div class="short">Gets the xtype for this component as registered with Ext.ComponentMgr. For a list of all&#13;
available xtypes, see the E...</div><div class="long">Gets the xtype for this component as registered with <a href="output/Ext.ComponentMgr.html" ext:cls="Ext.ComponentMgr">Ext.ComponentMgr</a>. For a list of all
available xtypes, see the <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a> header. Example usage:
<pre><code><b>var</b> t = <b>new</b> Ext.form.TextField();
alert(t.getXType());  <i>// alerts <em>'textfield'</em></i></code></pre><div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>String</code><div class="sub-desc">The xtype</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#getXType" ext:member="#getXType" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-getXTypes"></a><b><a href="source/Component.html#method-Ext.Component-getXTypes">getXTypes</a></b>()
    :
                                        String<div class="mdesc"><div class="short">Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all&#13;
available xtypes, see the Ex...</div><div class="long"><p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a> header.</p>
<p><b>If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.</b></p>
<p>Example usage:</p>
<pre><code><b>var</b> t = <b>new</b> Ext.form.TextField();
alert(t.getXTypes());  <i>// alerts <em>'component/box/field/textfield'</em></i>
</pre></code><div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>String</code><div class="sub-desc">The xtype hierarchy string</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#getXTypes" ext:member="#getXTypes" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-hasListener"></a><b><a href="source/Observable.html#method-Ext.util.Observable-hasListener">hasListener</a></b>(&nbsp;<code>String&nbsp;eventName</code>&nbsp;)
    :
                                        Boolean<div class="mdesc"><div class="short">Checks to see if this object has any listeners for a specified event</div><div class="long">Checks to see if this object has any listeners for a specified event<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc">The name of the event to check for</div></li></ul><strong>Returns:</strong><ul><li><code>Boolean</code><div class="sub-desc">True if the event is being listened for, else false</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#hasListener" ext:member="#hasListener" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hide"></a><b><a href="source/Component.html#method-Ext.Component-hide">hide</a></b>()
    :
                                        Ext.Component<div class="mdesc"><div class="short">Hide this component.</div><div class="long">Hide this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#hide" ext:member="#hide" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-highlight"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-highlight">highlight</a></b>(&nbsp;<code>Nmuber)&nbsp;series</code>,&nbsp;<code>Number&nbsp;datapoint</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot highlight 

Highlight a specific datapoint in the data series. 
You can either specify the actual obj...</div><div class="long">Wrapper of flot highlight 
<br><br>
Highlight a specific datapoint in the data series. 
You can either specify the actual objects, e.g. 
if you got them from a "plotclick" event, or you can specify the indices, e.g.
highlight(1, 3) to highlight the fourth point in the second series.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : Nmuber)<div class="sub-desc">index</div></li><li><code>datapoint</code> : Number<div class="sub-desc">index</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#highlight" ext:member="#highlight" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-insertData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-insertData">insertData</a></b>(&nbsp;<code>Object/Array&nbsp;data</code>,&nbsp;<code>Object&nbsp;series</code>,&nbsp;<code>Number&nbsp;idx</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Insert a new serie that built from data into the current series array</div><div class="long">Insert a new serie that built from data into the current series array<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>data</code> : Object/Array<div class="sub-desc">serie data to insert</div></li><li><code>series</code> : Object<div class="sub-desc">base serie options to pass setupData()</div></li><li><code>idx</code> : Number<div class="sub-desc">position to insert</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#insertData" ext:member="#insertData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-insertSeries"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-insertSeries">insertSeries</a></b>(&nbsp;<code>Object&nbsp;series</code>,&nbsp;<code>Number&nbsp;idx</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Insert a new serie to position specified by idx</div><div class="long">Insert a new serie to position specified by idx<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : Object<div class="sub-desc">the serie to insert</div></li><li><code>idx</code> : Number<div class="sub-desc">position to insert</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#insertSeries" ext:member="#insertSeries" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-isVisible"></a><b><a href="source/Component.html#method-Ext.Component-isVisible">isVisible</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Returns true if this component is visible.</div><div class="long">Returns true if this component is visible.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#isVisible" ext:member="#isVisible" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-isXType"></a><b><a href="source/Component.html#method-Ext.Component-isXType">isXType</a></b>(&nbsp;<code>String&nbsp;xtype</code>,&nbsp;<span title="Optional" class="optional">[<code>Boolean&nbsp;shallow</code>]</span>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended&#13;
from t...</div><div class="long"><p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).</p>
<p><b>If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.</b></p>
<p>For a list of all available xtypes, see the <a href="output/Ext.Component.html" ext:cls="Ext.Component">Ext.Component</a> header.</p>
<p>Example usage:</p>
<pre><code><b>var</b> t = <b>new</b> Ext.form.TextField();
<b>var</b> isText = t.isXType(<em>'textfield'</em>);        <i>// true</i>
<b>var</b> isBoxSubclass = t.isXType(<em>'box'</em>);       <i>// true, descended from BoxComponent</i>
<b>var</b> isBoxInstance = t.isXType(<em>'box'</em>, true); <i>// false, not a direct BoxComponent instance</i></code></pre><div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>xtype</code> : String<div class="sub-desc">The xtype to check for this Component</div></li><li><code>shallow</code> : Boolean<div class="sub-desc">(optional) False to check whether this Component is descended from the xtype (this is
the default), or true to check whether this Component is directly of the specified xtype.</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#isXType" ext:member="#isXType" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-on"></a><b><a href="source/Observable.html#method-Ext.util.Observable-on">on</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Function&nbsp;handler</code>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;scope</code>]</span>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;options</code>]</span>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Appends an event handler to this element (shorthand for addListener)</div><div class="long">Appends an event handler to this element (shorthand for addListener)<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc">The type of event to listen for</div></li><li><code>handler</code> : Function<div class="sub-desc">The method the event invokes</div></li><li><code>scope</code> : Object<div class="sub-desc">(optional) The scope in which to execute the handler
function. The handler function's "this" context.</div></li><li><code>options</code> : Object<div class="sub-desc">(optional)</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#on" ext:member="#on" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plot"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-plot">plot</a></b>(&nbsp;<code>Array&nbsp;series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Call plot method of flot</div><div class="long">Call plot method of flot<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : Array<div class="sub-desc">series to plot</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plot" ext:member="#plot" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-prependData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-prependData">prependData</a></b>(&nbsp;<code>Object/Array&nbsp;data</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Insert a new serie that built from data into top of series array</div><div class="long">Insert a new serie that built from data into top of series array<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>data</code> : Object/Array<div class="sub-desc">serie data to insert</div></li><li><code>series</code> : Object<div class="sub-desc">base serie options to pass setupData()</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#prependData" ext:member="#prependData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-prependSeries"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-prependSeries">prependSeries</a></b>(&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Insert a new serie into the top of series</div><div class="long">Insert a new serie into the top of series<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : Object<div class="sub-desc">the serie to insert</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#prependSeries" ext:member="#prependSeries" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-purgeListeners"></a><b><a href="source/Observable.html#method-Ext.util.Observable-purgeListeners">purgeListeners</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Removes all listeners for this object</div><div class="long">Removes all listeners for this object<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#purgeListeners" ext:member="#purgeListeners" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-relayEvents"></a><b><a href="source/Observable.html#method-Ext.util.Observable-relayEvents">relayEvents</a></b>(&nbsp;<code>Object&nbsp;o</code>,&nbsp;<code>Array&nbsp;events</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Relays selected events from the specified Observable as if the events were fired by this.</div><div class="long">Relays selected events from the specified Observable as if the events were fired by <tt><b>this</b></tt>.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>o</code> : Object<div class="sub-desc">The Observable whose events this object is to relay.</div></li><li><code>events</code> : Array<div class="sub-desc">Array of event names to relay.</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#relayEvents" ext:member="#relayEvents" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-removeClass"></a><b><a href="source/Component.html#method-Ext.Component-removeClass">removeClass</a></b>(&nbsp;<code>string&nbsp;cls</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Removes a CSS class from the component's underlying element.</div><div class="long">Removes a CSS class from the component's underlying element.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>cls</code> : string<div class="sub-desc">The CSS class name to remove</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#removeClass" ext:member="#removeClass" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-removeListener"></a><b><a href="source/Observable.html#method-Ext.util.Observable-removeListener">removeListener</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Function&nbsp;handler</code>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;scope</code>]</span>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Removes a listener</div><div class="long">Removes a listener<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc">The type of event to listen for</div></li><li><code>handler</code> : Function<div class="sub-desc">The handler to remove</div></li><li><code>scope</code> : Object<div class="sub-desc">(optional) The scope (this object) for the handler</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#removeListener" ext:member="#removeListener" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-removeSelected"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-removeSelected">removeSelected</a></b>(&nbsp;<code>Object&nbsp;seris</code>,&nbsp;<code>Object&nbsp;datapoint</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Remove a datapoint from selected datapoints.</div><div class="long">Remove a datapoint from selected datapoints.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>seris</code> : Object<div class="sub-desc">the owner serie of datapoint to remove</div></li><li><code>datapoint</code> : Object<div class="sub-desc">datapoint to remove</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#removeSelected" ext:member="#removeSelected" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-render"></a><b><a href="source/Component.html#method-Ext.Component-render">render</a></b>(&nbsp;<span title="Optional" class="optional">[<code>Element/HTMLElement/String&nbsp;container</code>]</span>,&nbsp;<span title="Optional" class="optional">[<code>String/Number&nbsp;position</code>]</span>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Render this Component into the passed HTML element.&#13;
If you are using a Container object to house this Component, the...</div><div class="long"><p>Render this Component into the passed HTML element.</p>
<p><b>If you are using a <a href="output/Ext.Container.html" ext:cls="Ext.Container">Container</a> object to house this Component, then
do not use the render method.</b></p>
<p>A Container's child Components are rendered by that Container's
<a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a> manager when the Container is first rendered.</p>
<p>Certain layout managers allow dynamic addition of child components. Those that do
include <a href="output/Ext.layout.CardLayout.html" ext:cls="Ext.layout.CardLayout">Ext.layout.CardLayout</a>, <a href="output/Ext.layout.AnchorLayout.html" ext:cls="Ext.layout.AnchorLayout">Ext.layout.AnchorLayout</a>,
<a href="output/Ext.layout.FormLayout.html" ext:cls="Ext.layout.FormLayout">Ext.layout.FormLayout</a>, <a href="output/Ext.layout.TableLayout.html" ext:cls="Ext.layout.TableLayout">Ext.layout.TableLayout</a>.</p>
<p>If the Container is already rendered when a new child Component is added, you may need to call
the Container's <a href="output/Ext.Container.html#Ext.Container-doLayout" ext:member="doLayout" ext:cls="Ext.Container">doLayout</a> to refresh the view which causes any
unrendered child Components to be rendered. This is required so that you can add multiple
child components if needed while only refreshing the layout once.</p>
<p>When creating complex UIs, it is important to remember that sizing and positioning
of child items is the responsibility of the Container's <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a> manager.
If you expect child items to be sized in response to user interactions, you must
configure the Container with a layout manager which creates and manages the type of layout you
have in mind.</p>
<p><b>Omitting the Container's <a href="output/Ext.Container.html#Ext.Container-layout" ext:member="layout" ext:cls="Ext.Container">layout</a> config means that a basic
layout manager is used which does nothing but render child components sequentially into the
Container. No sizing or positioning will be performed in this situation.</b></p><div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>container</code> : Element/HTMLElement/String<div class="sub-desc">(optional) The element this Component should be
rendered into. If it is being created from existing markup, this should be omitted.</div></li><li><code>position</code> : String/Number<div class="sub-desc">(optional) The element ID or DOM node index within the container <b>before</b>
which this component will be inserted (defaults to appending to the end of the container)</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#render" ext:member="#render" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-resumeEvents"></a><b><a href="source/Observable.html#method-Ext.util.Observable-resumeEvents">resumeEvents</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Resume firing events. (see suspendEvents)</div><div class="long">Resume firing events. (see <a href="output/Ext.util.Observable.html#Ext.util.Observable-suspendEvents" ext:member="suspendEvents" ext:cls="Ext.util.Observable">suspendEvents</a>)<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#resumeEvents" ext:member="#resumeEvents" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-selectAll"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-selectAll">selectAll</a></b>(&nbsp;<code>String/Object&nbsp;_series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Select all datapoints in the serie</div><div class="long">Select all datapoints in the serie<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>_series</code> : String/Object<div class="sub-desc">the serie to select all datapoints
If you specify nothing, all series are selected.</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#selectAll" ext:member="#selectAll" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setCrosshair"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setCrosshair">setCrosshair</a></b>(&nbsp;<code>Object&nbsp;</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot setCrosshair
This is not supported in flot 0.5.

Set the position of the crosshair. 
Note that this i...</div><div class="long">Wrapper of flot setCrosshair
This is not supported in flot 0.5.
<br><br>
Set the position of the crosshair. 
Note that this is cleared if the user moves the mouse. 
"pos" should be on the form { x: xpos, y: ypos } (or x2 and y2 if you're using the secondary axes), 
which is coincidentally the same format as what you get from a "plothover" event. 
If "pos" is null, the crosshair is cleared.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code></code> : Object<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setCrosshair" ext:member="#setCrosshair" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setData"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setData">setData</a></b>(&nbsp;<code>Array&nbsp;Series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot setData

You can use this to reset the data used. Note that axis scaling, ticks, legend etc. 
will no...</div><div class="long">Wrapper of flot setData
<br><br>
You can use this to reset the data used. Note that axis scaling, ticks, legend etc. 
will not be recomputed (use setupGrid() to do that). 
You'll probably want to call draw() afterwards.
<br><br>
You can use this function to speed up redrawing a plot if you know
that the axes won't change. Put in the new data with
setData(newdata) and call draw() afterwards, and you're good to go.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>Series</code> : Array<div class="sub-desc">to set</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setData" ext:member="#setData" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-setDisabled"></a><b><a href="source/Component.html#method-Ext.Component-setDisabled">setDisabled</a></b>(&nbsp;<code>Boolean&nbsp;disabled</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Convenience function for setting disabled/enabled by boolean.</div><div class="long">Convenience function for setting disabled/enabled by boolean.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>disabled</code> : Boolean<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#setDisabled" ext:member="#setDisabled" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-setHeight"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-setHeight">setHeight</a></b>(&nbsp;<code>Number&nbsp;height</code>&nbsp;)
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Sets the height of the component.  This method fires the resize event.</div><div class="long">Sets the height of the component.  This method fires the <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-resize" ext:member="resize" ext:cls="Ext.BoxComponent">resize</a> event.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>height</code> : Number<div class="sub-desc">The new height to set</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#setHeight" ext:member="#setHeight" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setHidden"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setHidden">setHidden</a></b>(&nbsp;<code>String/Object&nbsp;series</code>,&nbsp;<code>Bool&nbsp;hidden</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Change the show/hidden property of the serie</div><div class="long">Change the show/hidden property of the serie<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>series</code> : String/Object<div class="sub-desc">the serie to show or hide</div></li><li><code>hidden</code> : Bool<div class="sub-desc">true=hide false=show</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setHidden" ext:member="#setHidden" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-setPagePosition"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-setPagePosition">setPagePosition</a></b>(&nbsp;<code>Number&nbsp;x</code>,&nbsp;<code>Number&nbsp;y</code>&nbsp;)
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Sets the page XY position of the component.  To set the left and top instead, use setPosition.&#13;
This method fires the...</div><div class="long">Sets the page XY position of the component.  To set the left and top instead, use <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-setPosition" ext:member="setPosition" ext:cls="Ext.BoxComponent">setPosition</a>.
This method fires the <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-move" ext:member="move" ext:cls="Ext.BoxComponent">move</a> event.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>x</code> : Number<div class="sub-desc">The new x position</div></li><li><code>y</code> : Number<div class="sub-desc">The new y position</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#setPagePosition" ext:member="#setPagePosition" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-setPosition"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-setPosition">setPosition</a></b>(&nbsp;<code>Number&nbsp;left</code>,&nbsp;<code>Number&nbsp;top</code>&nbsp;)
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Sets the left and top of the component.  To set the page XY position instead, use setPagePosition.&#13;
This method fires...</div><div class="long">Sets the left and top of the component.  To set the page XY position instead, use <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-setPagePosition" ext:member="setPagePosition" ext:cls="Ext.BoxComponent">setPagePosition</a>.
This method fires the <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-move" ext:member="move" ext:cls="Ext.BoxComponent">move</a> event.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>left</code> : Number<div class="sub-desc">The new left</div></li><li><code>top</code> : Number<div class="sub-desc">The new top</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#setPosition" ext:member="#setPosition" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setSelection"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setSelection">setSelection</a></b>(&nbsp;<code>Object&nbsp;ranges</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot setSelection 

Set the selection rectangle. 
The passed in ranges is on the same form as returned in ...</div><div class="long">Wrapper of flot setSelection 
<br><br>
Set the selection rectangle. 
The passed in ranges is on the same form as returned in the "plotselected" event. 
If the selection mode is "x", you should put in either an xaxis (or x2axis) object,
if the mode is "y" you need to put in an yaxis (or y2axis) object
and both xaxis/x2axis and yaxis/y2axis if the selection mode is "xy", like this:
<pre>
setSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });
</pre>
setSelection will trigger the "plotselected" event when called. If
you don't want that to happen, e.g. if you're inside a
"plotselected" handler, pass true as the second parameter.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>ranges</code> : Object<div class="sub-desc">reclangle range to select</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setSelection" ext:member="#setSelection" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setSelectionAction"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setSelectionAction">setSelectionAction</a></b>(&nbsp;<code>String&nbsp;action</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Set the action at range selection</div><div class="long">Set the action at range selection<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>action</code> : String<div class="sub-desc">'select' or 'move' or 'zoom'</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setSelectionAction" ext:member="#setSelectionAction" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-setSize"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-setSize">setSize</a></b>(&nbsp;<code>Number/Object&nbsp;width</code>,&nbsp;<code>Number&nbsp;height</code>&nbsp;)
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Sets the width and height of the component.  This method fires the resize event.  This method can accept&#13;
either widt...</div><div class="long">Sets the width and height of the component.  This method fires the <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-resize" ext:member="resize" ext:cls="Ext.BoxComponent">resize</a> event.  This method can accept
either width and height as separate numeric arguments, or you can pass a size object like {width:10, height:20}.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>width</code> : Number/Object<div class="sub-desc">The new width to set, or a size object in the format {width, height}</div></li><li><code>height</code> : Number<div class="sub-desc">The new height to set (not required if a size object is passed as the first arg)</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#setSize" ext:member="#setSize" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setTooltipDisable"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setTooltipDisable">setTooltipDisable</a></b>(&nbsp;<code>Bool&nbsp;disable</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Enable/disable the tooltip</div><div class="long">Enable/disable the tooltip<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>disable</code> : Bool<div class="sub-desc">false=enable true=disable</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setTooltipDisable" ext:member="#setTooltipDisable" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-setVisible"></a><b><a href="source/Component.html#method-Ext.Component-setVisible">setVisible</a></b>(&nbsp;<code>Boolean&nbsp;visible</code>&nbsp;)
    :
                                        Ext.Component<div class="mdesc"><div class="short">Convenience function to hide or show this component by boolean.</div><div class="long">Convenience function to hide or show this component by boolean.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>visible</code> : Boolean<div class="sub-desc">True to show, false to hide</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#setVisible" ext:member="#setVisible" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-setWidth"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-setWidth">setWidth</a></b>(&nbsp;<code>Number&nbsp;width</code>&nbsp;)
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Sets the width of the component.  This method fires the resize event.</div><div class="long">Sets the width of the component.  This method fires the <a href="output/Ext.BoxComponent.html#Ext.BoxComponent-resize" ext:member="resize" ext:cls="Ext.BoxComponent">resize</a> event.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>width</code> : Number<div class="sub-desc">The new width to set</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#setWidth" ext:member="#setWidth" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-setupGrid"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-setupGrid">setupGrid</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot setupGrid

Recalculate and set axis scaling, ticks, legend etc.

Note that because of the drawing mod...</div><div class="long">Wrapper of flot setupGrid
<br><br>
Recalculate and set axis scaling, ticks, legend etc.
<br><br>
Note that because of the drawing model of the canvas, 
this function will immediately redraw (actually reinsert in the DOM)
the labels and the legend, but not the actual tick lines because they're drawn on the canvas. 
You need to call draw() to get the canvas redrawn.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#setupGrid" ext:member="#setupGrid" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-show"></a><b><a href="source/Component.html#method-Ext.Component-show">show</a></b>()
    :
                                        Ext.Component<div class="mdesc"><div class="short">Show this component.</div><div class="long">Show this component.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.Component</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#show" ext:member="#show" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-suspendEvents"></a><b><a href="source/Observable.html#method-Ext.util.Observable-suspendEvents">suspendEvents</a></b>()
    :
                                        void<div class="mdesc"><div class="short">Suspend the firing of all events. (see resumeEvents)</div><div class="long">Suspend the firing of all events. (see <a href="output/Ext.util.Observable.html#Ext.util.Observable-resumeEvents" ext:member="resumeEvents" ext:cls="Ext.util.Observable">resumeEvents</a>)<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#suspendEvents" ext:member="#suspendEvents" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-syncSize"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-syncSize">syncSize</a></b>()
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Force the component's size to recalculate based on the underlying element's current height and width.</div><div class="long">Force the component's size to recalculate based on the underlying element's current height and width.<div class="mdetail-params"><strong>Parameters:</strong><ul><li>None.</li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#syncSize" ext:member="#syncSize" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.util.Observable-un"></a><b><a href="source/Observable.html#method-Ext.util.Observable-un">un</a></b>(&nbsp;<code>String&nbsp;eventName</code>,&nbsp;<code>Function&nbsp;handler</code>,&nbsp;<span title="Optional" class="optional">[<code>Object&nbsp;scope</code>]</span>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Removes a listener (shorthand for removeListener)</div><div class="long">Removes a listener (shorthand for removeListener)<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>eventName</code> : String<div class="sub-desc">The type of event to listen for</div></li><li><code>handler</code> : Function<div class="sub-desc">The handler to remove</div></li><li><code>scope</code> : Object<div class="sub-desc">(optional) The scope (this object) for the handler</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.util.Observable.html#un" ext:member="#un" ext:cls="Ext.util.Observable">Observable</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-unhighlight"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-unhighlight">unhighlight</a></b>(&nbsp;<code>Number&nbsp;target</code>,&nbsp;<code>Number&nbsp;datapoint</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Wrapper of flot unhighlight 

Remove the highlighting of the point, same parameters as highlight.</div><div class="long">Wrapper of flot unhighlight 
<br><br>
Remove the highlighting of the point, same parameters as highlight.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>target</code> : Number<div class="sub-desc">serie</div></li><li><code>datapoint</code> : Number<div class="sub-desc">to unhighlight</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#unhighlight" ext:member="#unhighlight" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-unselectAll"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-unselectAll">unselectAll</a></b>(&nbsp;<code>String/Object&nbsp;_series</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Unselect current selection</div><div class="long">Unselect current selection<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>_series</code> : String/Object<div class="sub-desc"></div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#unselectAll" ext:member="#unselectAll" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-updateBox"></a><b><a href="source/BoxComponent.html#method-Ext.BoxComponent-updateBox">updateBox</a></b>(&nbsp;<code>Object&nbsp;box</code>&nbsp;)
    :
                                        Ext.BoxComponent<div class="mdesc"><div class="short">Sets the current box measurements of the component's underlying element.</div><div class="long">Sets the current box measurements of the component's underlying element.<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>box</code> : Object<div class="sub-desc">An object in the format {x, y, width, height}</div></li></ul><strong>Returns:</strong><ul><li><code>Ext.BoxComponent</code><div class="sub-desc">this</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#updateBox" ext:member="#updateBox" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-zoom"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-zoom">zoom</a></b>(&nbsp;<code>Object&nbsp;range</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Set the new zooming range</div><div class="long">Set the new zooming range<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>range</code> : Object<div class="sub-desc">zooming range</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#zoom" ext:member="#zoom" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-zoomRatio"></a><b><a href="source/Flot.html#method-Ext.ux.Flot-zoomRatio">zoomRatio</a></b>(&nbsp;<code>Number&nbsp;ratio</code>&nbsp;)
    :
                                        void<div class="mdesc"><div class="short">Zoom by ratio for aurrent dispaly range</div><div class="long">Zoom by ratio for aurrent dispaly range<div class="mdetail-params"><strong>Parameters:</strong><ul><li><code>ratio</code> : Number<div class="sub-desc">1.0 means 100%.</div></li></ul><strong>Returns:</strong><ul><li>void</li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#zoomRatio" ext:member="#zoomRatio" ext:cls="Ext.ux.Flot">Flot</a></td></tr></tbody></table><a id="Ext.ux.PieFlot-events"></a><h2>Public Events</h2><table cellspacing="0" class="member-table"><tbody><tr><th colspan="2" class="sig-header">Event</th><th class="msource-header">Defined By</th></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-beforedestroy"></a><b><a href="source/Component.html#event-Ext.Component-beforedestroy">beforedestroy</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires before the component is destroyed. Return false to stop the destroy.</div><div class="long">Fires before the component is destroyed. Return false to stop the destroy.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#beforedestroy" ext:member="#beforedestroy" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-beforedraw"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-beforedraw">beforedraw</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    <div class="mdesc"><div class="short">Fire before (re-)draw flot graph. 
If you return false, the drawing graph is not processed.</div><div class="long">Fire before (re-)draw flot graph. 
If you return false, the drawing graph is not processed.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>series</code> : Object<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#beforedraw" ext:member="#beforedraw" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-beforehide"></a><b><a href="source/Component.html#event-Ext.Component-beforehide">beforehide</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires before the component is hidden. Return false to stop the hide.</div><div class="long">Fires before the component is hidden. Return false to stop the hide.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#beforehide" ext:member="#beforehide" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-beforerender"></a><b><a href="source/Component.html#event-Ext.Component-beforerender">beforerender</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires before the component is rendered. Return false to stop the render.</div><div class="long">Fires before the component is rendered. Return false to stop the render.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#beforerender" ext:member="#beforerender" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-beforeshow"></a><b><a href="source/Component.html#event-Ext.Component-beforeshow">beforeshow</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires before the component is shown. Return false to stop the show.</div><div class="long">Fires before the component is shown. Return false to stop the show.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#beforeshow" ext:member="#beforeshow" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-beforestaterestore"></a><b><a href="source/Component.html#event-Ext.Component-beforestaterestore">beforestaterestore</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>,&nbsp;<code>Object&nbsp;state</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires before the state of the component is restored. Return false to stop the restore.</div><div class="long">Fires before the state of the component is restored. Return false to stop the restore.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li><li><code>state</code> : Object<div class="sub-desc">The hash of state values</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#beforestaterestore" ext:member="#beforestaterestore" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-beforestatesave"></a><b><a href="source/Component.html#event-Ext.Component-beforestatesave">beforestatesave</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>,&nbsp;<code>Object&nbsp;state</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires before the state of the component is saved to the configured state provider. Return false to stop the save.</div><div class="long">Fires before the state of the component is saved to the configured state provider. Return false to stop the save.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li><li><code>state</code> : Object<div class="sub-desc">The hash of state values</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#beforestatesave" ext:member="#beforestatesave" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-click"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-click">click</a></b> :
                                      (&nbsp;<code>OBject&nbsp;event</code>&nbsp;)
    <div class="mdesc"><div class="short"></div><div class="long"><div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>event</code> : OBject<div class="sub-desc">Fire when clicked anywhere in Ext Flot instance area. 
This is Ext.Element (DOM) event. 
If you return false, Ext.ux.Flot do nothing.</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#click" ext:member="#click" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-contextmenu"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-contextmenu">contextmenu</a></b> :
                                      (&nbsp;<code>OBject&nbsp;event</code>&nbsp;)
    <div class="mdesc"><div class="short"></div><div class="long"><div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>event</code> : OBject<div class="sub-desc">Fire before to show contextMenu.
If you return false, Ext.ux.Flot do nothing.</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#contextmenu" ext:member="#contextmenu" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-dblclick"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-dblclick">dblclick</a></b> :
                                      (&nbsp;<code>OBject&nbsp;event</code>&nbsp;)
    <div class="mdesc"><div class="short"></div><div class="long"><div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>event</code> : OBject<div class="sub-desc">Fire when dblclicked anywhere in Ext Flot instance area.
This is Ext.Element (DOM) event. 
If you return false, Ext.ux.Flot do nothing.</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#dblclick" ext:member="#dblclick" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-destroy"></a><b><a href="source/Component.html#event-Ext.Component-destroy">destroy</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is destroyed.</div><div class="long">Fires after the component is destroyed.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#destroy" ext:member="#destroy" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-disable"></a><b><a href="source/Component.html#event-Ext.Component-disable">disable</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is disabled.</div><div class="long">Fires after the component is disabled.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#disable" ext:member="#disable" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-draw"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-draw">draw</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    <div class="mdesc"><div class="short">Fire after (re-)draw flot graph.</div><div class="long">Fire after (re-)draw flot graph.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>series</code> : Object<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#draw" ext:member="#draw" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-enable"></a><b><a href="source/Component.html#event-Ext.Component-enable">enable</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is enabled.</div><div class="long">Fires after the component is enabled.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#enable" ext:member="#enable" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-hide"></a><b><a href="source/Component.html#event-Ext.Component-hide">hide</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is hidden.</div><div class="long">Fires after the component is hidden.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#hide" ext:member="#hide" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-legendclick"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-legendclick">legendclick</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Ext.Element&nbsp;legend</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires when the legend is clicked</div><div class="long">Fires when the legend is clicked<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>legend</code> : Ext.Element<div class="sub-desc">(legendColorBox ro legendLabel)</div></li><li><code>series</code> : Object<div class="sub-desc">the serie which is connected with the legend
If you return false, Ext.ux.Flot do nothing.</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#legendclick" ext:member="#legendclick" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-move"></a><b><a href="source/BoxComponent.html#event-Ext.BoxComponent-move">move</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>,&nbsp;<code>Number&nbsp;x</code>,&nbsp;<code>Number&nbsp;y</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is moved.</div><div class="long">Fires after the component is moved.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li><li><code>x</code> : Number<div class="sub-desc">The new x position</div></li><li><code>y</code> : Number<div class="sub-desc">The new y position</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#move" ext:member="#move" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plotclick"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-plotclick">plotclick</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;event</code>,&nbsp;<code>Object&nbsp;pos</code>,&nbsp;<code>Object&nbsp;item</code>&nbsp;)
    <div class="mdesc"><div class="short">Fire when the mouse is clicked on Ext Flot canvas. 
If item is not null, the mouse clicks the item.
This event enable...</div><div class="long">Fire when the mouse is clicked on Ext Flot canvas. 
If item is not null, the mouse clicks the item.
This event enables when grid.clickable is true. 
If you return false, Ext.ux.Flot do nothing.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>event</code> : Object<div class="sub-desc">event object</div></li><li><code>pos</code> : Object<div class="sub-desc">position of clicking
{x: xpos, y: ypos, x2: xpos2, y2: ypos2}</div></li><li><code>item</code> : Object<div class="sub-desc">the items clicked
The contents are same with plotselected</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plotclick" ext:member="#plotclick" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plothide"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-plothide">plothide</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires when the serie is hidden.</div><div class="long">Fires when the serie is hidden.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>series</code> : Object<div class="sub-desc">The serie hidden</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plothide" ext:member="#plothide" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plothover"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-plothover">plothover</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;event</code>,&nbsp;<code>Object&nbsp;pos</code>,&nbsp;<code>Object&nbsp;item</code>&nbsp;)
    <div class="mdesc"><div class="short">Fire when the mouse moves on Ext Flot canvas. 
If item is not null, the mouse moves on the item.
This event enables w...</div><div class="long">Fire when the mouse moves on Ext Flot canvas. 
If item is not null, the mouse moves on the item.
This event enables when grid.hovarable is true. 
If you return false, Ext.ux.Flot do nothing.
'pos' contains the following members<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>event</code> : Object<div class="sub-desc">event object</div></li><li><code>pos</code> : Object<div class="sub-desc">position of moving
{x: xpos, y: ypos, x2: xpos2, y2: ypos2}</div></li><li><code>item</code> : Object<div class="sub-desc">the items moved on
The contents are same with plotselected</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plothover" ext:member="#plothover" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plotselected"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-plotselected">plotselected</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;event</code>,&nbsp;<code>Object&nbsp;range</code>,&nbsp;<code>Object&nbsp;item</code>&nbsp;)
    <div class="mdesc"><div class="short">Fire when any datapoint is selected. 
This event enables when series.selectable is true. 
If you return false, Ext.ux...</div><div class="long">Fire when any datapoint is selected. 
This event enables when series.selectable is true. 
If you return false, Ext.ux.Flot do nothing.
'Item' contains the following members.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>event</code> : Object<div class="sub-desc">event object</div></li><li><code>range</code> : Object<div class="sub-desc">the rectangle ranges selected 
{x: xpos, y: ypos, x2: xpos2, y2: ypos2}</div></li><li><code>item</code> : Object<div class="sub-desc">the items selected
If it is not null, the value contains selected data points, etc...
<li>datapoint Series and datapoint selected like [0, 2]
<li>dataIndex Index of datapoint in the serie
<li>series    The serie selected
<li>seriesIndex Index of serie in the series
<li>pageX     coordinate of selected point in browser window.
<li>pageY     coordinate of selected point in browser window.</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plotselected" ext:member="#plotselected" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plotselecting"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-plotselecting">plotselecting</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;event</code>,&nbsp;<code>Object&nbsp;range</code>,&nbsp;<code>Object&nbsp;item</code>&nbsp;)
    <div class="mdesc"><div class="short">Fire when any datapoint is selecting (dragging). 
This event enables when series.selectable is true. 
If you return f...</div><div class="long">Fire when any datapoint is selecting (dragging). 
This event enables when series.selectable is true. 
If you return false, Ext.ux.Flot do nothing.
The arguments are same with plotselected
This not supported in flot 0.5.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>event</code> : Object<div class="sub-desc">event object</div></li><li><code>range</code> : Object<div class="sub-desc">the rectangle ranges selected</div></li><li><code>item</code> : Object<div class="sub-desc">the items selected
The contents are same with plotselected</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plotselecting" ext:member="#plotselecting" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-plotshow"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-plotshow">plotshow</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Object&nbsp;series</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires when the serie is shown.</div><div class="long">Fires when the serie is shown.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>series</code> : Object<div class="sub-desc">The serie shown</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#plotshow" ext:member="#plotshow" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-render"></a><b><a href="source/Component.html#event-Ext.Component-render">render</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is rendered.</div><div class="long">Fires after the component is rendered.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#render" ext:member="#render" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.BoxComponent-resize"></a><b><a href="source/BoxComponent.html#event-Ext.BoxComponent-resize">resize</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>,&nbsp;<code>Number&nbsp;adjWidth</code>,&nbsp;<code>Number&nbsp;adjHeight</code>,&nbsp;<code>Number&nbsp;rawWidth</code>,&nbsp;<code>Number&nbsp;rawHeight</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is resized.</div><div class="long">Fires after the component is resized.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li><li><code>adjWidth</code> : Number<div class="sub-desc">The box-adjusted width that was set</div></li><li><code>adjHeight</code> : Number<div class="sub-desc">The box-adjusted height that was set</div></li><li><code>rawWidth</code> : Number<div class="sub-desc">The width that was originally specified</div></li><li><code>rawHeight</code> : Number<div class="sub-desc">The height that was originally specified</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.BoxComponent.html#resize" ext:member="#resize" ext:cls="Ext.BoxComponent">BoxComponent</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-selectionactionchange"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-selectionactionchange">selectionactionchange</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>String&nbsp;action</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires when the selection.action is changed.</div><div class="long">Fires when the selection.action is changed.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>action</code> : String<div class="sub-desc">new selectin.action value</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#selectionactionchange" ext:member="#selectionactionchange" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.ux.Flot-selectionchange"></a><b><a href="source/Flot.html#event-Ext.ux.Flot-selectionchange">selectionchange</a></b> :
                                      (&nbsp;<code>Ext.ux.Flot&nbsp;this</code>,&nbsp;<code>Array&nbsp;selected</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires when the any selections are changed</div><div class="long">Fires when the any selections are changed<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.ux.Flot<div class="sub-desc"></div></li><li><code>selected</code> : Array<div class="sub-desc">selected data points
It is same contents with this.getSelected()</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.ux.Flot.html#selectionchange" ext:member="#selectionchange" ext:cls="Ext.ux.Flot">Flot</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-show"></a><b><a href="source/Component.html#event-Ext.Component-show">show</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the component is shown.</div><div class="long">Fires after the component is shown.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#show" ext:member="#show" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-staterestore"></a><b><a href="source/Component.html#event-Ext.Component-staterestore">staterestore</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>,&nbsp;<code>Object&nbsp;state</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the state of the component is restored.</div><div class="long">Fires after the state of the component is restored.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li><li><code>state</code> : Object<div class="sub-desc">The hash of state values</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#staterestore" ext:member="#staterestore" ext:cls="Ext.Component">Component</a></td></tr><tr class="method-row expandable inherited"><td class="micon"><a href="#expand" class="exi">&nbsp;</a></td><td class="sig"><a id="Ext.Component-statesave"></a><b><a href="source/Component.html#event-Ext.Component-statesave">statesave</a></b> :
                                      (&nbsp;<code>Ext.Component&nbsp;this</code>,&nbsp;<code>Object&nbsp;state</code>&nbsp;)
    <div class="mdesc"><div class="short">Fires after the state of the component is saved to the configured state provider.</div><div class="long">Fires after the state of the component is saved to the configured state provider.<div class="mdetail-params"><strong style="font-weight: normal;">Listeners will be called with the following arguments:</strong><ul><li><code>this</code> : Ext.Component<div class="sub-desc"></div></li><li><code>state</code> : Object<div class="sub-desc">The hash of state values</div></li></ul></div></div></div></td><td class="msource"><a href="output/Ext.Component.html#statesave" ext:member="#statesave" ext:cls="Ext.Component">Component</a></td></tr></tbody></table></div>